This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)


================================================================
Directory Structure
================================================================
.repomix/
  bundles.json
app/
  api/
    ai-analysis/
      route.ts
    database/
      route.ts
    generate-pdf/
      route.ts
    generate-progress-report/
      route.ts
    parse-xml/
      route.ts
  database/
    page.tsx
    To improve the readability and compactne.md
  preview/
    page.tsx
  progress-report/
    page.tsx
  select-report/
    page.tsx
  team-summary/
    page.tsx
  upload/
    page.tsx
  globals.css
  layout.tsx
  page.tsx
lib/
  config/
    database.ts
    README.md
  database.ts
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
.gitignore
env.example
eslint.config.mjs
mysql-timetracker.txt
mysql.sql
next.config.ts
package.json
postcss.config.mjs
README.md
sample-data.xml
test-db.js
timesheet-data.xml
tsconfig.json

================================================================
Files
================================================================

================
File: .repomix/bundles.json
================
{
  "bundles": {}
}

================
File: app/api/ai-analysis/route.ts
================
import { NextRequest, NextResponse } from 'next/server';

interface TimeEntry {
  id: string;
  date: string;
  user: string;
  project: string;
  task: string;
  description: string;
  hours: number;
  taskNumber?: string;
}

interface ParsedData {
  entries: TimeEntry[];
  summary: {
    totalHours: number;
    totalDays: number;
    users: string[];
    projects: string[];
  };
}

interface GroupedProgress {
  [user: string]: {
    projects: {
      [project: string]: {
        tasks: Array<{
          taskNumber?: string;
          description: string;
          hours: number;
          dates: string[];
        }>;
        totalHours: number;
      };
    };
    leave?: Array<{ date: string; reason: string }>;
    publicHolidays?: Array<{ date: string; reason: string }>;
    totalHours: number;
  };
}

interface RequestBody {
  prompt: string;
  data: {
    entries: TimeEntry[];
    summary: ParsedData['summary'];
    groupedProgress: GroupedProgress;
  };
}

// Function to analyze data using a simple rule-based approach
// In a real implementation, you would integrate with OpenAI, Anthropic, or other AI services
function analyzeDataWithRules(prompt: string, data: RequestBody['data']): string {
  const { entries, summary, groupedProgress } = data;
  
  // Extract key insights
  const totalHours = summary.totalHours;
  const totalDays = summary.totalDays;
  const users = summary.users;
  const projects = summary.projects;
  
  // Calculate average hours per day
  const avgHoursPerDay = totalDays > 0 ? totalHours / totalDays : 0;
  
  // Find most active users
  const userHours = Object.entries(groupedProgress).map(([user, data]) => ({
    user,
    hours: data.totalHours
  })).sort((a, b) => b.hours - a.hours);
  
  // Find most time-consuming projects
  const projectHours: { [project: string]: number } = {};
  Object.values(groupedProgress).forEach(userData => {
    Object.entries(userData.projects).forEach(([project, projectData]) => {
      projectHours[project] = (projectHours[project] || 0) + projectData.totalHours;
    });
  });
  
  const topProjects = Object.entries(projectHours)
    .sort(([,a], [,b]) => b - a)
    .slice(0, 3);
  
  // Find tasks with most hours
  const taskHours: { [task: string]: number } = {};
  entries.forEach(entry => {
    const taskKey = entry.taskNumber ? `#${entry.taskNumber} - ${entry.description}` : entry.description;
    taskHours[taskKey] = (taskHours[taskKey] || 0) + entry.hours;
  });
  
  const topTasks = Object.entries(taskHours)
    .sort(([,a], [,b]) => b - a)
    .slice(0, 5);
  
  // Generate analysis based on prompt keywords
  let analysis = '';
  
  if (prompt.toLowerCase().includes('productivity') || prompt.toLowerCase().includes('efficiency')) {
    analysis += `📊 **Productivity Analysis**\n\n`;
    analysis += `• Total team hours: ${totalHours.toFixed(1)} hours over ${totalDays} days\n`;
    analysis += `• Average hours per day: ${avgHoursPerDay.toFixed(1)} hours\n`;
    analysis += `• Most productive team member: ${userHours[0]?.user} (${userHours[0]?.hours.toFixed(1)} hours)\n\n`;
  }
  
  if (prompt.toLowerCase().includes('project') || prompt.toLowerCase().includes('workload')) {
    analysis += `🏗️ **Project Workload Analysis**\n\n`;
    analysis += `• Most time-consuming projects:\n`;
    topProjects.forEach(([project, hours], index) => {
      analysis += `  ${index + 1}. ${project}: ${hours.toFixed(1)} hours\n`;
    });
    analysis += `\n`;
  }
  
  if (prompt.toLowerCase().includes('task') || prompt.toLowerCase().includes('optimization')) {
    analysis += `📋 **Task Analysis**\n\n`;
    analysis += `• Top time-consuming tasks:\n`;
    topTasks.forEach(([task, hours], index) => {
      analysis += `  ${index + 1}. ${task}: ${hours.toFixed(1)} hours\n`;
    });
    analysis += `\n`;
  }
  
  if (prompt.toLowerCase().includes('trend') || prompt.toLowerCase().includes('pattern')) {
    analysis += `📈 **Work Pattern Analysis**\n\n`;
    analysis += `• Team size: ${users.length} members\n`;
    analysis += `• Active projects: ${projects.length}\n`;
    analysis += `• Average hours per user: ${(totalHours / users.length).toFixed(1)} hours\n`;
    analysis += `• Work distribution: ${(totalHours / users.length / avgHoursPerDay).toFixed(1)} days per user\n\n`;
  }
  
  if (prompt.toLowerCase().includes('improvement') || prompt.toLowerCase().includes('suggestion')) {
    analysis += `💡 **Recommendations**\n\n`;
    
    if (avgHoursPerDay < 6) {
      analysis += `• Consider increasing daily work hours to improve productivity\n`;
    }
    
    if (userHours.length > 1 && userHours[0].hours > userHours[userHours.length - 1].hours * 2) {
      analysis += `• Workload distribution is uneven - consider redistributing tasks\n`;
    }
    
    if (topProjects.length > 0 && topProjects[0][1] > totalHours * 0.5) {
      analysis += `• Project "${topProjects[0][0]}" is consuming most resources - consider resource allocation\n`;
    }
    
    analysis += `• Regular team check-ins could help identify bottlenecks early\n`;
    analysis += `• Consider time tracking for better project estimation\n\n`;
  }
  
  // If no specific keywords found, provide general analysis
  if (!analysis) {
    analysis = `📊 **General Team Analysis**\n\n`;
    analysis += `• Team Overview: ${users.length} members worked ${totalHours.toFixed(1)} hours over ${totalDays} days\n`;
    analysis += `• Average productivity: ${avgHoursPerDay.toFixed(1)} hours per day\n`;
    analysis += `• Most active member: ${userHours[0]?.user} (${userHours[0]?.hours.toFixed(1)} hours)\n`;
    analysis += `• Top project: ${topProjects[0]?.[0]} (${topProjects[0]?.[1].toFixed(1)} hours)\n`;
    analysis += `• Most time-consuming task: ${topTasks[0]?.[0]} (${topTasks[0]?.[1].toFixed(1)} hours)\n\n`;
    analysis += `💡 **Quick Insights**\n`;
    analysis += `• Work distribution appears ${userHours.length > 1 && userHours[0].hours > userHours[userHours.length - 1].hours * 1.5 ? 'uneven' : 'balanced'}\n`;
    analysis += `• Team productivity is ${avgHoursPerDay >= 6 ? 'good' : 'below average'}\n`;
    analysis += `• Focus areas: ${topProjects.slice(0, 2).map(([p]) => p).join(', ')}\n`;
  }
  
  return analysis;
}

export async function POST(request: NextRequest) {
  try {
    const body: RequestBody = await request.json();
    const { prompt, data } = body;

    if (!prompt || !data) {
      return NextResponse.json(
        { error: 'Missing prompt or data' },
        { status: 400 }
      );
    }

    // For now, use rule-based analysis
    // In a production environment, you would integrate with an AI service like:
    // - OpenAI GPT-4
    // - Anthropic Claude
    // - Google Gemini
    // - Azure OpenAI
    
    const analysis = analyzeWithOpenAI(prompt, data);

    return NextResponse.json({
      analysis,
      timestamp: new Date().toISOString(),
      prompt: prompt
    });

  } catch (error) {
    console.error('Error in AI analysis:', error);
    return NextResponse.json(
      { error: 'Failed to generate AI analysis' },
      { status: 500 }
    );
  }
}

// Example integration with OpenAI (uncomment and configure for production use)

async function analyzeWithOpenAI(prompt: string, data: RequestBody['data']): Promise<string> {
  const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
  
  if (!OPENAI_API_KEY) {
    throw new Error('OpenAI API key not configured');
  }

  const systemPrompt = `You are a business analyst specializing in team productivity and project management. 
  Analyze the provided timesheet data and provide insights based on the user's prompt. 
  Focus on actionable insights, trends, and recommendations.`;

  const userPrompt = `Based on this timesheet data:
  ${JSON.stringify(data, null, 2)}
  
  Please analyze: ${prompt}`;

  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${OPENAI_API_KEY}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      model: 'gpt-4',
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: userPrompt }
      ],
      max_tokens: 1000,
      temperature: 0.7,
    }),
  });

  if (!response.ok) {
    throw new Error('OpenAI API request failed');
  }

  const result = await response.json();
  return result.choices[0].message.content;
}

================
File: app/api/database/route.ts
================
import { NextRequest, NextResponse } from 'next/server';
import { 
  getTimeEntries, 
  getUsers, 
  getProjects, 
  getTasks, 
  getClients,
  getFilteredTimeEntries,
  testConnection,
  getProjectsByClient,
  getDateRange,
  getTeamSummaryData
} from '../../../lib/database';

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const action = searchParams.get('action');
    let data;
    switch (action) {
      case 'test':
        data = await testConnection();
        break;
      case 'timeEntries':
        data = await getTimeEntries(); // no limit
        break;
      case 'users':
        data = await getUsers();
        break;
      case 'projects':
        data = await getProjects();
        break;
      case 'tasks':
        data = await getTasks();
        break;
      case 'clients':
        data = await getClients();
        break;
      case 'filteredEntries':
        // Support multiple project_id
        const projectIds = searchParams.getAll('project_id').map(Number).filter(Boolean);
        const filters = {
          user_id: searchParams.get('user_id') ? parseInt(searchParams.get('user_id')!) : undefined,
          project_id: projectIds.length > 0 ? projectIds : (searchParams.get('project_id') ? parseInt(searchParams.get('project_id')!) : undefined),
          task_id: searchParams.get('task_id') ? parseInt(searchParams.get('task_id')!) : undefined,
          client_id: searchParams.get('client_id') ? parseInt(searchParams.get('client_id')!) : undefined,
          billable: searchParams.get('billable') ? parseInt(searchParams.get('billable')!) : undefined,
          date_from: searchParams.get('date_from') || undefined,
          date_to: searchParams.get('date_to') || undefined,
          // no limit, no offset
        };
        data = await getFilteredTimeEntries(filters);
        break;
      case 'projectsByClient':
        const clientId = searchParams.get('client_id');
        if (!clientId) {
          return NextResponse.json({ error: 'Missing client_id' }, { status: 400 });
        }
        data = await getProjectsByClient(Number(clientId));
        break;
      case 'dateRange':
        data = await getDateRange();
        break;
      case 'teamSummary':
        const dateFrom = searchParams.get('date_from') || '2025-07-01';
        const dateTo = searchParams.get('date_to') || '2025-07-31';
        data = await getTeamSummaryData(dateFrom, dateTo);
        break;
      default:
        return NextResponse.json({ error: 'Invalid action' }, { status: 400 });
    }

    return NextResponse.json(data);
  } catch (error) {
    console.error('Database error:', error);
    return NextResponse.json(
      { error: 'Database connection failed' },
      { status: 500 }
    );
  }
}

================
File: app/api/generate-pdf/route.ts
================
import { NextRequest, NextResponse } from 'next/server';
import puppeteer from 'puppeteer';

interface TimeEntry {
  date: string;
  user: string;
  client: string;
  project: string;
  task: string;
  time_field_1307: string;
  duration: string;
  note: string;
}

interface ParsedData {
  client?: string;
  entries: TimeEntry[];
}

type GroupingOption = 'none' | 'date' | 'user' | 'client' | 'project' | 'task';

interface HierarchicalGroup {
  key: string;
  level: number;
  entries: TimeEntry[];
  subGroups: Map<string, HierarchicalGroup>;
}

export async function POST(request: NextRequest) {
  try {
    const { data, grouping = 'date', totalsOnly = false }: { data: ParsedData; grouping: string; totalsOnly?: boolean } = await request.json();

    if (!data || !data.entries || !Array.isArray(data.entries)) {
      return NextResponse.json({ error: 'Invalid data format' }, { status: 400 });
    }

    // Parse grouping levels from comma-separated string
    const groupingLevels = grouping.split(',').map(level => level.trim() as GroupingOption).filter(level => level !== 'none');
    
    // Before grouping, sort data.entries by date ascending
    const sortedEntries = [...data.entries].sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());
    
    // Create hierarchical grouping structure
    const hierarchicalData = buildHierarchicalGrouping(sortedEntries, groupingLevels);

    const htmlContent = generateTimesheetHTML(data, hierarchicalData, totalsOnly);

    // Launch Puppeteer
    const browser = await puppeteer.launch({
      headless: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });

    const page = await browser.newPage();
    await page.setContent(htmlContent, { waitUntil: 'networkidle0' });
    
    const pdf = await page.pdf({
      format: 'A4',
      printBackground: true,
      margin: {
        top: '20mm',
        right: '15mm',
        bottom: '20mm',
        left: '15mm'
      }
    });

    await browser.close();

    return new NextResponse(pdf, {
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="timesheet-report-${new Date().toISOString().split('T')[0]}.pdf"`,
      },
    });
  } catch (error) {
    console.error('Error generating PDF:', error);
    return NextResponse.json({ error: 'Failed to generate PDF' }, { status: 500 });
  }
}

function buildHierarchicalGrouping(entries: TimeEntry[], groupingLevels: GroupingOption[]): Map<string, HierarchicalGroup> {
  const rootGroups = new Map<string, HierarchicalGroup>();
  
  if (groupingLevels.length === 0) {
    // No grouping, create a single group with all entries
    rootGroups.set('All Entries', {
      key: 'All Entries',
      level: 0,
      entries: entries,
      subGroups: new Map()
    });
    return rootGroups;
  }
  
  entries.forEach(entry => {
    let currentGroups = rootGroups;
    let currentLevel = 0;
    
    groupingLevels.forEach((level, index) => {
      const groupValue = getGroupValue(entry, level);
      
      if (!currentGroups.has(groupValue)) {
        currentGroups.set(groupValue, {
          key: groupValue,
          level: currentLevel,
          entries: [],
          subGroups: new Map()
        });
      }
      
      const group = currentGroups.get(groupValue)!;
      
      // If this is the last grouping level, add the entry to this group
      if (index === groupingLevels.length - 1) {
        group.entries.push(entry);
      }
      
      // Move to next level
      currentGroups = group.subGroups;
      currentLevel++;
    });
  });
  
  return rootGroups;
}

function getGroupValue(entry: TimeEntry, groupBy: GroupingOption): string {
  switch (groupBy) {
    case 'date': return entry.date;
    case 'user': return entry.user;
    case 'client': return entry.client;
    case 'project': return entry.project;
    case 'task': return entry.task || 'No Task';
    default: return '';
  }
}

// Utility to sum durations in HH:MM or HH:MM:SS format
function sumDurations(entries: TimeEntry[]): string {
  let totalMinutes = 0;
  for (const entry of entries) {
    if (!entry.duration) continue;
    const [h, m] = entry.duration.split(':');
    totalMinutes += parseInt(h || '0', 10) * 60 + parseInt(m || '0', 10);
  }
  const hours = Math.floor(totalMinutes / 60);
  const minutes = totalMinutes % 60;
  return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
}

// Add formatDuration helper
function formatDuration(duration: string): string {
  if (!duration) return '00:00';
  const [h, m] = duration.split(':');
  return `${h.padStart(2, '0')}:${(m || '00').padStart(2, '0')}`;
}

function renderHierarchicalGroups(groups: Map<string, HierarchicalGroup>, totalsOnly: boolean, level: number = 0): string {
  return Array.from(groups.entries()).map(([groupKey, group]) => {
    const allEntriesInGroup = getAllEntriesFromGroup(group);
    const groupDuration = sumDurations(allEntriesInGroup);
    const indentClass = level > 0 ? `style="margin-left: ${level * 20}px;"` : '';
    
    let html = `
      <div class="group-header" ${indentClass}>
        <span>${groupKey || 'All Entries'}</span>
        <span class="group-stats">${allEntriesInGroup.length} entries • ${groupDuration} hours</span>
      </div>
    `;
    
    // If there are subgroups, render them recursively
    if (group.subGroups.size > 0) {
      html += renderHierarchicalGroups(group.subGroups, totalsOnly, level + 1);
    } else if (group.entries.length > 0 && !totalsOnly) {
      // This is a leaf group with actual entries, render the table
      html += `
        <table class="entries-table">
          <thead>
            <tr>
              <th>Date</th>
              <th>User</th>
              <th>Client</th>
              <th>Project</th>
              <th>Task</th>
              <th>Duration</th>
              <th>Note</th>
            </tr>
          </thead>
          <tbody>
            ${group.entries.map(entry => `
              <tr>
                <td>${entry.date}</td>
                <td>${entry.user}</td>
                <td>${entry.client}</td>
                <td>${entry.project}</td>
                <td>${entry.task || '-'}</td>
                <td class="duration-cell">${formatDuration(entry.duration)}</td>
                <td class="note-cell" title="${entry.note || ''}">${entry.note || '-'}</td>
              </tr>
            `).join('')}
            <tr class="total-row">
              <td colspan="5" style="text-align:right;">Subtotal</td>
              <td class="duration-cell">${sumDurations(group.entries)}</td>
              <td></td>
            </tr>
          </tbody>
        </table>
      `;
    }
    
    return html;
  }).join('');
}

function getAllEntriesFromGroup(group: HierarchicalGroup): TimeEntry[] {
  let allEntries = [...group.entries];
  
  // Recursively get entries from subgroups
  for (const subGroup of group.subGroups.values()) {
    allEntries = allEntries.concat(getAllEntriesFromGroup(subGroup));
  }
  
  return allEntries;
}

function generateTimesheetHTML(data: ParsedData, hierarchicalData: Map<string, HierarchicalGroup>, totalsOnly: boolean = false): string {
  const totalDuration = sumDurations(data.entries);
  const totalEntries = data.entries.length;
  const uniqueUsers = [...new Set(data.entries.map(entry => entry.user))];
  const uniqueProjects = [...new Set(data.entries.map(entry => entry.project))];

  return `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="UTF-8">
      <style>
        body {
          font-family: 'Inter', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
          margin: 0;
          padding: 0;
          background-color: #f8fafc;
          color: #1e293b;
          line-height: 1.6;
        }
        .container {
          max-width: 1000px;
          margin: 0 auto;
          background: white;
          padding: 40px 12px 32px 12px;
          border-radius: 16px;
          box-shadow: 0 6px 24px 0 rgba(30,64,175,0.08);
        }
        .header {
          text-align: left;
          margin-bottom: 32px;
          padding-bottom: 18px;
          border-bottom: 3px solid #3b82f6;
        }
        .client-name {
          font-size: 2rem;
          font-weight: 800;
          color: #1e40af;
          margin-bottom: 0.5rem;
          text-transform: uppercase;
          letter-spacing: 1px;
        }
        .report-title {
          font-size: 1.25rem;
          color: #334155;
          margin-bottom: 0.5rem;
          font-weight: 600;
        }
        .summary-section {
          display: flex;
          gap: 32px;
          margin-bottom: 32px;
        }
        .summary-card {
          background: linear-gradient(135deg, #3b82f6 0%, #6366f1 100%);
          color: white;
          padding: 18px 28px;
          border-radius: 12px;
          text-align: center;
          min-width: 120px;
          flex: 1;
        }
        .summary-card h3 {
          margin: 0 0 8px 0;
          font-size: 0.95rem;
          text-transform: uppercase;
          letter-spacing: 0.5px;
          opacity: 0.9;
          font-weight: 600;
        }
        .summary-card .value {
          font-size: 1.5rem;
          font-weight: 800;
          margin: 0;
        }
        .details-section {
          display: flex;
          gap: 32px;
          margin-bottom: 32px;
        }
        .detail-card {
          background: #f1f5f9;
          padding: 18px 24px;
          border-radius: 10px;
          border-left: 4px solid #3b82f6;
          flex: 1;
        }
        .detail-card h3 {
          margin: 0 0 12px 0;
          color: #1e40af;
          font-size: 1rem;
          text-transform: uppercase;
          letter-spacing: 0.5px;
          font-weight: 700;
        }
        .detail-list {
          list-style: none;
          padding: 0;
          margin: 0;
        }
        .detail-list li {
          padding: 4px 0;
          border-bottom: 1px solid #e2e8f0;
          color: #475569;
          font-size: 0.98rem;
        }
        .detail-list li:last-child {
          border-bottom: none;
        }
        .entries-section {
          margin-top: 32px;
        }
        .group-header {
          background: linear-gradient(90deg, #1e40af 0%, #3b82f6 100%);
          color: white;
          padding: 12px 20px;
          margin: 24px 0 0 0;
          border-radius: 10px 10px 0 0;
          font-weight: bold;
          font-size: 1.1rem;
          display: flex;
          justify-content: space-between;
          align-items: center;
        }
        .group-stats {
          font-size: 0.98rem;
          opacity: 0.9;
        }
        .entries-table {
          width: 100%;
          border-collapse: collapse;
          margin-bottom: 24px;
          background: white;
          border-radius: 0 0 10px 10px;
          overflow: hidden;
          box-shadow: 0 2px 8px rgba(30,64,175,0.04);
        }
        .entries-table th {
          background: #f1f5f9;
          padding: 10px 6px;
          text-align: left;
          font-weight: 700;
          color: #334155;
          font-size: 0.95rem;
          text-transform: uppercase;
          letter-spacing: 0.5px;
          border-bottom: 2px solid #e2e8f0;
        }
        .entries-table td {
          padding: 8px 6px;
          border-bottom: 1px solid #f1f5f9;
          font-size: 0.98rem;
          color: #475569;
        }
        .entries-table tr:hover {
          background-color: #f8fafc;
        }
        .duration-cell {
          font-weight: 700;
          color: #059669;
          text-align: right;
        }
        .note-cell {
          max-width: 400px;
          word-wrap: break-word;
          white-space: pre-line;
          line-height: 1.4;
        }
        .total-row {
          background: #e0e7ff;
          font-weight: 800;
          color: #1e40af;
        }
        .main-title {
          font-size: 2rem;
          font-weight: 800;
          color: #1e40af;
          margin-bottom: 0.5rem;
          letter-spacing: 1px;
        }
        .client-subheading {
          font-size: 1.25rem;
          color: #334155;
          margin-bottom: 0.5rem;
          font-weight: 600;
          text-transform: uppercase;
        }
        .totals-only .group-header {
          margin-bottom: 16px;
          border-radius: 10px;
        }
        .group-header[style*="margin-left"] {
          background: linear-gradient(90deg, #6366f1 0%, #8b5cf6 100%);
          font-size: 1rem;
          margin-top: 12px;
        }
        .group-header[style*="margin-left: 40px"] {
          background: linear-gradient(90deg, #8b5cf6 0%, #a855f7 100%);
          font-size: 0.95rem;
          margin-top: 8px;
        }
      </style>
    </head>
    <body>
      <div class="container${totalsOnly ? ' totals-only' : ''}">
        <div class="header">
          <div class="main-title">Timesheet Report${totalsOnly ? ' - Summary View' : ''}</div>
          <div class="client-subheading">${data.client || 'No Client'}</div>
          ${totalsOnly ? '<div style="color: #6366f1; font-size: 0.9rem; margin-top: 8px;">This report shows group totals only. Individual entries are hidden.</div>' : ''}
        </div>

        <div class="summary-section">
          <div class="summary-card">
            <h3>Total Hours</h3>
            <p class="value">${totalDuration}</p>
          </div>
          <div class="summary-card">
            <h3>Total Entries</h3>
            <p class="value">${totalEntries}</p>
          </div>
          <div class="summary-card">
            <h3>Team Members</h3>
            <p class="value">${uniqueUsers.length}</p>
          </div>
          <div class="summary-card">
            <h3>Projects</h3>
            <p class="value">${uniqueProjects.length}</p>
          </div>
        </div>

        <div class="details-section">
          <div class="detail-card">
            <h3>Team Members</h3>
            <ul class="detail-list">
              ${uniqueUsers.map(user => `<li>${user}</li>`).join('')}
            </ul>
          </div>
          <div class="detail-card">
            <h3>Projects</h3>
            <ul class="detail-list">
              ${uniqueProjects.map(project => `<li>${project}</li>`).join('')}
            </ul>
          </div>
        </div>

        <div class="entries-section">
          ${renderHierarchicalGroups(hierarchicalData, totalsOnly)}
        </div>
      </div>
    </body>
    </html>
  `;
}

================
File: app/api/generate-progress-report/route.ts
================
import { NextRequest, NextResponse } from 'next/server';

interface TimeEntry {
  taskNumber?: string;
  description: string;
  hours: number;
  dates: string[];
}

interface ProjectData {
  tasks: TimeEntry[];
  totalHours: number;
}

interface UserData {
  projects: { [project: string]: ProjectData };
  leave?: Array<{ date: string; reason: string }>;
  publicHolidays?: Array<{ date: string; reason: string }>;
  totalHours: number;
}

interface GroupedProgress {
  [user: string]: UserData;
}

interface RequestBody {
  groupedProgress: GroupedProgress;
  reportText: string;
}

export async function POST(request: NextRequest) {
  try {
    const body: RequestBody = await request.json();
    const { groupedProgress, reportText } = body;

    // Generate the report text
    let report = `Team Progress Report\n`;
    report += `Generated on: ${new Date().toLocaleDateString()}\n\n`;
    report += reportText;

    Object.entries(groupedProgress).forEach(([user, userData]) => {
      report += `${user}\n`;

      // Add projects
      Object.entries(userData.projects).forEach(([project, projectData]) => {
        if (projectData.tasks && projectData.tasks.length > 0) {
          report += `${project}\n`;
          projectData.tasks.forEach(task => {
            const taskPrefix = task.taskNumber ? `#${task.taskNumber} | ` : '';
            const datesInfo = task.dates.length > 1 ? ` (${task.dates.join(', ')})` : '';
            report += `${taskPrefix}${task.description}${datesInfo}\n`;
          });
          report += '\n';
        }
      });

      // Add public holiday information
      if (userData.publicHolidays && userData.publicHolidays.length > 0) {
        const holidayDates = userData.publicHolidays.map(holiday => holiday.date).join(', ');
        report += `${holidayDates} - Public Holiday\n\n`;
      }

      // Add leave information
      if (userData.leave && userData.leave.length > 0) {
        const leaveDates = userData.leave.map(leave => leave.date).join(', ');
        report += `${leaveDates} - Leave\n\n`;
      }

      report += '\n';
    });

    // Create response with text content
    const response = new NextResponse(report, {
      status: 200,
      headers: {
        'Content-Type': 'text/plain',
        'Content-Disposition': `attachment; filename="team-progress-report.txt"`,
      },
    });

    return response;
  } catch (error) {
    console.error('Error generating progress report:', error);
    return NextResponse.json(
      { error: 'Failed to generate progress report' },
      { status: 500 }
    );
  }
}

================
File: app/api/parse-xml/route.ts
================
import { NextRequest, NextResponse } from 'next/server';
import { parseString } from 'xml2js';

export async function POST(request: NextRequest) {
  try {
    const formData = await request.formData();
    const file = formData.get('file') as File;

    if (!file) {
      return NextResponse.json(
        { error: 'No file provided' },
        { status: 400 }
      );
    }

    if (!file.name.endsWith('.xml')) {
      return NextResponse.json(
        { error: 'File must be an XML file' },
        { status: 400 }
      );
    }

    // Read the file content
    const text = await file.text();

    // Parse XML to JSON
    return new Promise((resolve) => {
      parseString(text, { explicitArray: false }, (err: any, result: any) => {
        if (err) {
          resolve(NextResponse.json(
            { error: 'Failed to parse XML file' },
            { status: 400 }
          ));
        } else {
          resolve(NextResponse.json(result));
        }
      });
    });

  } catch (error) {
    console.error('Error parsing XML:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

================
File: app/database/page.tsx
================
'use client';

import React, { useState, useEffect } from 'react';
import type { JSX } from 'react';
import Link from 'next/link';

interface TimeEntry {
  id: number;
  user_id: number;
  user_name: string;
  user_login: string;
  date: string;
  start: string | null;
  duration: string | null;
  project_name: string | null;
  task_name: string | null;
  client_name: string | null;
  comment: string | null;
  billable: number;
  approved: number;
  paid: number;
  task_id?: number; // Added for task number
  task_number?: string; // Added for custom task number
}

interface User {
  id: number;
  name: string;
  login: string;
  email: string | null;
}

interface Project {
  id: number;
  name: string;
  description: string | null;
  client_ids?: number[]; // Added for client filtering
}

interface Client {
  id: number;
  name: string;
  address: string | null;
}

export default function DatabasePage() {
  const [timeEntries, setTimeEntries] = useState<TimeEntry[]>([]);
  const [users, setUsers] = useState<User[]>([]);
  const [projects, setProjects] = useState<Project[]>([]);
  const [clients, setClients] = useState<Client[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  // Filter states
  const [selectedUser, setSelectedUser] = useState<string>('');
  // Change selectedProject from string to array
  const [selectedProject, setSelectedProject] = useState<string[]>([]);
  const [selectedTask, setSelectedTask] = useState<string>('');
  const [selectedClient, setSelectedClient] = useState<string>('');
  // Default date range - will be updated with actual database range
  const [dateFrom, setDateFrom] = useState<string>('2025-07-01');
  const [dateTo, setDateTo] = useState<string>('2025-07-31');
  const [filteredProjects, setFilteredProjects] = useState<Project[]>([]);
  // Add billable filter state
  const [billableOnly, setBillableOnly] = useState(false);
  // Add totals only filter state
  const [totalsOnly, setTotalsOnly] = useState(false);

  // Add state for group by dropdowns
  const groupByOptions = [
    { value: 'no_grouping', label: '--- no grouping ---' },
    { value: 'date', label: 'date' },
    { value: 'user', label: 'user' },
    { value: 'client', label: 'client' },
    { value: 'project', label: 'project' },
    { value: 'time_field_2', label: 'Task / Bug Number' },
  ];
  const [groupBy1, setGroupBy1] = useState<string>('user');
  const [groupBy2, setGroupBy2] = useState<string>('no_grouping');
  const [groupBy3, setGroupBy3] = useState<string>('no_grouping');

  useEffect(() => {
    loadInitialData();
  }, []);

  // Fetch projects for selected client
  useEffect(() => {
    const fetchProjects = async () => {
      if (selectedClient) {
        const res = await fetch(`/api/database?action=projectsByClient&client_id=${selectedClient}`);
        if (res.ok) {
          const data = await res.json();
          setFilteredProjects(data);
        } else {
          setFilteredProjects([]);
        }
      } else {
        setFilteredProjects(projects);
      }
    };
    fetchProjects();
  }, [selectedClient, projects]);

  const loadInitialData = async () => {
    try {
      setIsLoading(true);
      setError(null);

      // Load all data in parallel
      const [entriesRes, usersRes, projectsRes, clientsRes, dateRangeRes] = await Promise.all([
        fetch('/api/database?action=timeEntries'),
        fetch('/api/database?action=users'),
        fetch('/api/database?action=projects'),
        fetch('/api/database?action=clients'),
        fetch('/api/database?action=dateRange')
      ]);

      if (!entriesRes.ok || !usersRes.ok || !projectsRes.ok || !clientsRes.ok || !dateRangeRes.ok) {
        throw new Error('Failed to load data from database');
      }

      const [entries, usersData, projectsData, clientsData, dateRangeData] = await Promise.all([
        entriesRes.json(),
        usersRes.json(),
        projectsRes.json(),
        clientsRes.json(),
        dateRangeRes.json()
      ]);

      setTimeEntries(entries);
      setUsers(usersData);
      setProjects(projectsData);
      setClients(clientsData);
      
      // Update date range with actual database range
      if (dateRangeData && dateRangeData.min_date && dateRangeData.max_date) {
        setDateFrom(dateRangeData.min_date);
        setDateTo(dateRangeData.max_date);
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to load data');
    } finally {
      setIsLoading(false);
    }
  };

  const applyFilters = async () => {
    try {
      setIsLoading(true);
      setError(null);

      const params = new URLSearchParams({
        action: 'filteredEntries'
      });

      if (selectedUser) params.append('user_id', selectedUser);
      if (selectedProject.length > 0) {
        selectedProject.forEach(projectId => params.append('project_id', projectId));
      }
      if (selectedTask) params.append('task_id', selectedTask);
      if (selectedClient) params.append('client_id', selectedClient);
      if (dateFrom) params.append('date_from', dateFrom);
      if (dateTo) params.append('date_to', dateTo);
      if (billableOnly) params.append('billable', '1');

      const response = await fetch(`/api/database?${params}`);
      if (!response.ok) {
        throw new Error('Failed to filter data');
      }

      const data = await response.json();
      setTimeEntries(data);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to filter data');
    } finally {
      setIsLoading(false);
    }
  };

  const clearFilters = () => {
    setSelectedUser('');
    setSelectedProject([]);
    setSelectedTask('');
    setSelectedClient('');
    setDateFrom('2025-07-01');
    setDateTo('2025-07-31');
    setBillableOnly(false);
    setTotalsOnly(false);
    loadInitialData();
  };

  const generatePDF = async () => {
    try {
      // Transform database entries to match the expected format
      // In generatePDF, pass the selected client name as the 'client' property in the data object
      const clientName = selectedClient ? (clients.find(c => String(c.id) === selectedClient)?.name || '') : '';
      const transformedData = {
        client: clientName,
        entries: timeEntries.map(entry => ({
          // Only date part
          date: getDateOnly(entry.date),
          user: entry.user_name || entry.user_login,
          client: entry.client_name || 'No Client',
          project: entry.project_name || 'No Project',
          // Include task number with name
          task: entry.task_id ? `#${entry.task_id} ${entry.task_name || ''}`.trim() : (entry.task_name || 'No Task'),
          time_field_1307: entry.start || '',
          duration: entry.duration || '0',
          note: entry.comment || ''
        }))
      };

      // In generatePDF, build grouping string based on dropdowns
      const buildGrouping = () => {
        const g1 = groupBy1 !== 'no_grouping' ? groupBy1 : null;
        const g2 = groupBy2 !== 'no_grouping' && groupBy2 !== groupBy1 ? groupBy2 : null;
        const g3 = groupBy3 !== 'no_grouping' && groupBy3 !== groupBy1 && groupBy3 !== groupBy2 ? groupBy3 : null;
        return [g1, g2, g3].filter(Boolean).join(',');
      };

      const response = await fetch('/api/generate-pdf', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          data: transformedData,
          grouping: buildGrouping() || 'none',
          totalsOnly: totalsOnly, // Pass the totals only flag
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to generate PDF');
      }

      // Create blob and download
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `database-timesheet-${new Date().toISOString().split('T')[0]}.pdf`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to generate PDF');
    }
  };

  const formatDuration = (duration: string | null) => {
    if (!duration) return '0:00';
    // Assuming duration is in HH:MM:SS format
    const parts = duration.split(':');
    if (parts.length >= 2) {
      return `${parts[0]}:${parts[1]}`;
    }
    return duration;
  };

  // Helper to extract only the date part from ISO string
  const getDateOnly = (dateStr: string) => {
    if (!dateStr) return '';
    // Handles both 'YYYY-MM-DD' and 'YYYY-MM-DDTHH:mm:ss.sssZ'
    return dateStr.split('T')[0];
  };

  // Filter projects by selected client
  // const filteredProjects = selectedClient
  //   ? projects.filter(p => {
  //       // Assume project has a client_ids array or similar, otherwise needs backend support
  //       // For now, fallback to all projects if not available
  //       // This will be replaced after backend endpoint is added
  //       return !p.client_ids || p.client_ids.includes(Number(selectedClient));
  //     })
  //   : projects;

  // Helper to sum durations in HH:MM or HH:MM:SS format
  function sumDurations(entries: TimeEntry[]): string {
    let totalMinutes = 0;
    for (const entry of entries) {
      if (!entry.duration) continue;
      const [h, m] = entry.duration.split(':');
      totalMinutes += parseInt(h || '0', 10) * 60 + parseInt(m || '0', 10);
    }
    const hours = Math.floor(totalMinutes / 60);
    const minutes = totalMinutes % 60;
    return `${hours}:${minutes.toString().padStart(2, '0')}`;
  }

  // Grouping types
  interface Group {
    key: string | null;
    entries: TimeEntry[];
  }
  interface NestedGroup {
    key: string | null;
    entries: Group[];
  }

  // Grouping logic
  function groupEntries(entries: TimeEntry[], groupBy1: string, groupBy2: string, groupBy3: string): (Group | NestedGroup)[] {
    if (!entries.length) return [];
    const g1 = groupBy1 !== 'no_grouping' ? groupBy1 : null;
    const g2 = groupBy2 !== 'no_grouping' && groupBy2 !== groupBy1 ? groupBy2 : null;
    const g3 = groupBy3 !== 'no_grouping' && groupBy3 !== groupBy1 && groupBy3 !== groupBy2 ? groupBy3 : null;
    if (!g1) return [{ key: null, entries }];
    const getKey = (entry: TimeEntry, key: string): string => {
      switch (key) {
        case 'date': return getDateOnly(entry.date);
        case 'user': return entry.user_name || entry.user_login;
        case 'client': return entry.client_name || '-';
        case 'project': return entry.project_name || '-';
        case 'time_field_2': return entry.task_number || '-';
        default: return '-';
      }
    };
    const grouped: Record<string, TimeEntry[]> = {};
    for (const entry of entries) {
      const k1 = getKey(entry, g1) || '-';
      if (!grouped[k1]) grouped[k1] = [];
      grouped[k1].push(entry);
    }
    if (!g2) {
      return Object.entries(grouped).map(([key, groupEntries]) => ({ key, entries: groupEntries }));
    }
    // Nested grouping (2 or 3 levels)
    return Object.entries(grouped).map(([key, groupEntries]) => {
      const nested: Record<string, TimeEntry[]> = {};
      for (const entry of groupEntries) {
        const k2 = getKey(entry, g2) || '-';
        if (!nested[k2]) nested[k2] = [];
        nested[k2].push(entry);
      }
      if (!g3) {
        return {
          key,
          entries: Object.entries(nested).map(([subkey, subentries]) => ({ key: subkey, entries: subentries }))
        };
      }
      // 3rd level
      return {
        key,
        entries: Object.entries(nested).map(([subkey, subentries]) => {
          const nested3: Record<string, TimeEntry[]> = {};
          for (const entry of subentries) {
            const k3 = getKey(entry, g3) || '-';
            if (!nested3[k3]) nested3[k3] = [];
            nested3[k3].push(entry);
          }
          return {
            key: subkey,
            entries: Object.entries(nested3).map(([k, v]) => ({ key: k, entries: v }))
          };
        })
      };
    });
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 py-8">
        <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="bg-red-50 border border-red-200 rounded-md p-4">
            <p className="text-red-800">{error}</p>
            <button 
              onClick={loadInitialData}
              className="mt-2 bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700"
            >
              Retry
            </button>
          </div>
        </div>
      </div>
    );
  }

  // Before rendering and before PDF generation, sort timeEntries by date ascending
  const sortedTimeEntries = [...timeEntries].sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());
  const grouped = groupEntries(sortedTimeEntries, groupBy1, groupBy2, groupBy3);
  const totalDuration = sumDurations(sortedTimeEntries);

  // Update renderRows to accept a parentKey argument (default '').
  // In each recursive call, pass parentKey + '-' + group.key.
  // In the key for each <tr>, use `header-${parentKey}-${group.key}` and `subtotal-${parentKey}-${group.key}`.
  // This ensures keys are unique across the entire table, even for duplicate group keys at different nesting levels.
  function renderRows(groups: (Group | NestedGroup)[], level = 0, parentKey = ''): JSX.Element[] {
    return groups.map(group => {
      const groupKey = `${parentKey}-${group.key || 'empty'}`;
      if ('entries' in group && group.entries.length && !('entries' in group.entries[0])) {
        // Leaf group
        const leafGroup = group as Group;
        return [
          <tr key={`header-${groupKey}`} className={level === 0 ? 'bg-gray-100 font-bold' : 'bg-gray-50 font-semibold'}>
            <td colSpan={7} className="py-2 px-4 text-left">{level === 0 ? 'Subtotal' : 'Subgroup'} <span className="text-blue-700">{leafGroup.key}</span></td>
            <td className="py-2 px-4 text-right">{sumDurations(leafGroup.entries)}</td>
          </tr>,
          // Only show individual entries if totalsOnly is false
          ...(totalsOnly ? [] : leafGroup.entries.map(entry => (
            <tr key={entry.id} className="hover:bg-gray-50">
              <td className="px-2 py-4 whitespace-nowrap text-sm text-gray-900 w-24" title={getDateOnly(entry.date)}>{getDateOnly(entry.date)}</td>
              <td className="px-2 py-4 whitespace-nowrap text-sm text-gray-900 w-32 truncate" title={entry.user_name || entry.user_login}>{entry.user_name || entry.user_login}</td>
              <td className="px-2 py-4 whitespace-nowrap text-sm text-gray-900 w-32 truncate" title={entry.client_name || '-'}>{entry.client_name || '-'}</td>
              <td className="px-2 py-4 whitespace-nowrap text-sm text-gray-900 w-40 truncate" title={entry.project_name || '-'}>{entry.project_name || '-'}</td>
              <td className="px-2 py-4 whitespace-nowrap text-sm text-gray-900 w-32 truncate" title={`${entry.task_number || (entry.task_id ? `#${entry.task_id}` : '-')}${entry.task_name ? ` ${entry.task_name}` : ''}`}>{`${entry.task_number || (entry.task_id ? `#${entry.task_id}` : '-')}${entry.task_name ? ` ${entry.task_name}` : ''}`}</td>
              <td className="px-2 py-4 whitespace-nowrap text-sm text-gray-900 w-16 text-right">{formatDuration(entry.duration)}</td>
              <td className="px-4 py-4 text-sm text-gray-900 max-w-2xl break-words whitespace-pre-line" style={{wordBreak: 'break-word'}} title={entry.comment || ''}>
                {entry.comment && entry.comment.length > 120 ? (
                  <span>{entry.comment.slice(0, 120)}... <span className="text-blue-500">(hover to view)</span></span>
                ) : (entry.comment || '-')}
              </td>
            </tr>
          )))
        ];
      } else {
        // Nested group
        const nestedGroup = group as NestedGroup;
        return [
          <tr key={`header-${groupKey}`} className={level === 0 ? 'bg-gray-200 font-bold' : 'bg-gray-100 font-semibold'}>
            <td colSpan={8} className="py-2 px-4 text-left">{level === 0 ? 'Subtotal' : 'Subgroup'} <span className="text-blue-700">{nestedGroup.key}</span></td>
          </tr>,
          // Always show nested group headers and subtotals, but hide individual entries when totalsOnly is true
          ...renderRows(nestedGroup.entries, level + 1, groupKey),
          <tr key={`subtotal-${groupKey}`} className="bg-gray-100 font-bold">
            <td colSpan={7} className="py-2 px-4 text-right">Subtotal <span className="text-blue-700">{nestedGroup.key}</span></td>
            <td className="py-2 px-4 text-right">{sumDurations(nestedGroup.entries.flatMap((g: Group) => g.entries))}</td>
          </tr>
        ];
      }
    }).flat();
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 py-10 w-full">
      <div className="w-full max-w-[1800px] mx-auto px-4 sm:px-8">
        {/* Header */}
        <div className="mb-10 flex flex-col gap-2 sm:gap-0 sm:flex-row sm:items-center sm:justify-between border-b border-slate-200 pb-6">
          <div>
            <Link 
              href="/" 
              className="text-blue-600 hover:text-blue-800 text-base font-medium transition-colors"
            >
              ← Back to Home
            </Link>
            <h1 className="text-4xl font-extrabold text-slate-900 mt-2 tracking-tight">Database Timesheet Generator</h1>
            <p className="mt-1 text-lg text-slate-600 font-normal">Generate PDF reports directly from the MySQL database</p>
          </div>
        </div>

        {/* Filters Section */}
        <div className="bg-white rounded-xl shadow-md border border-slate-200 p-8 mb-10 flex flex-col gap-6">
          <h2 className="text-2xl font-semibold text-slate-900 mb-2">Filter Data</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {/* Client first */}
            <div>
              <label className="block text-sm font-semibold text-slate-700 mb-2">Client</label>
              <select 
                value={selectedClient}
                onChange={e => {
                  setSelectedClient(e.target.value);
                  setSelectedProject([]);
                }}
                className="w-full border border-slate-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-slate-50 text-base"
              >
                <option value="">All Clients</option>
                {clients.map(client => (
                  <option key={client.id} value={client.id}>{client.name}</option>
                ))}
              </select>
            </div>
            {/* Project depends on client */}
            <div>
              <label className="block text-sm font-semibold text-slate-700 mb-2">Project</label>
              <select
                multiple
                value={selectedProject}
                onChange={e => {
                  const selectedOptions = Array.from(e.target.selectedOptions, option => option.value);
                  setSelectedProject(selectedOptions);
                }}
                className="w-full border border-slate-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-slate-50 text-base min-h-[120px]"
              >
                <option value="">All Projects</option>
                {filteredProjects.map(project => (
                  <option key={project.id} value={project.id}>{project.name}</option>
                ))}
              </select>
              {selectedProject.length > 0 && (
                <div className="mt-2 text-sm text-slate-600">
                  Selected: {selectedProject.length} project{selectedProject.length !== 1 ? 's' : ''}
                </div>
              )}
            </div>
            {/* User and Task as before */}
            <div>
              <label className="block text-sm font-semibold text-slate-700 mb-2">User</label>
              <select 
                value={selectedUser}
                onChange={(e) => setSelectedUser(e.target.value)}
                className="w-full border border-slate-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-slate-50 text-base"
              >
                <option value="">All Users</option>
                {users.map(user => (
                  <option key={user.id} value={user.id}>{user.name}</option>
                ))}
              </select>
            </div>
            {/* Date From/To as before */}
            <div>
              <label className="block text-sm font-semibold text-slate-700 mb-2">Date From</label>
              <input 
                type="date"
                value={dateFrom}
                onChange={(e) => setDateFrom(e.target.value)}
                className="w-full border border-slate-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-slate-50 text-base"
              />
            </div>
            <div>
              <label className="block text-sm font-semibold text-slate-700 mb-2">Date To</label>
              <input 
                type="date"
                value={dateTo}
                onChange={(e) => setDateTo(e.target.value)}
                className="w-full border border-slate-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-slate-50 text-base"
              />
            </div>
            {/* Group By Dropdowns */}
            <div>
              <label className="block text-sm font-semibold text-slate-700 mb-2">Group By 1</label>
              <select
                className="w-full border border-slate-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-slate-50 text-base"
                name="group_by1"
                id="group_by1"
                value={groupBy1}
                onChange={e => setGroupBy1(e.target.value)}
              >
                {groupByOptions.map(opt => (
                  <option key={opt.value} value={opt.value}>{opt.label}</option>
                ))}
              </select>
            </div>
            <div>
              <label className="block text-sm font-semibold text-slate-700 mb-2">Group By 2</label>
              <select
                className="w-full border border-slate-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-slate-50 text-base"
                name="group_by2"
                id="group_by2"
                value={groupBy2}
                onChange={e => setGroupBy2(e.target.value)}
              >
                {groupByOptions.map(opt => (
                  <option key={opt.value} value={opt.value}>{opt.label}</option>
                ))}
              </select>
            </div>
            <div>
              <label className="block text-sm font-semibold text-slate-700 mb-2">Group By 3</label>
              <select
                className="w-full border border-slate-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-slate-50 text-base"
                name="group_by3"
                id="group_by3"
                value={groupBy3}
                onChange={e => setGroupBy3(e.target.value)}
              >
                {groupByOptions.map(opt => (
                  <option key={opt.value} value={opt.value}>{opt.label}</option>
                ))}
              </select>
            </div>
            {/* Billable only checkbox */}
            <div className="flex items-center gap-2 mt-2">
              <input
                type="checkbox"
                id="billableOnly"
                checked={billableOnly}
                onChange={e => setBillableOnly(e.target.checked)}
                className="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
              />
              <label htmlFor="billableOnly" className="text-sm font-medium text-slate-700">Billable only</label>
            </div>
            {/* Totals only checkbox */}
            <div className="flex items-center gap-2 mt-2">
              <input
                type="checkbox"
                id="totalsOnly"
                checked={totalsOnly}
                onChange={e => setTotalsOnly(e.target.checked)}
                className="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
              />
              <label htmlFor="totalsOnly" className="text-sm font-medium text-slate-700">Totals only</label>
            </div>
          </div>
          <div className="flex flex-wrap gap-4 mt-4">
            <button
              onClick={applyFilters}
              disabled={isLoading}
              className="bg-blue-600 text-white px-8 py-2 rounded-lg font-semibold shadow hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-400 transition disabled:opacity-50"
            >
              {isLoading ? 'Loading...' : 'Apply Filters'}
            </button>
            <button
              onClick={clearFilters}
              className="bg-slate-600 text-white px-8 py-2 rounded-lg font-semibold shadow hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-slate-400 transition"
            >
              Clear Filters
            </button>
            <button
              onClick={generatePDF}
              disabled={timeEntries.length === 0}
              className="bg-green-600 text-white px-8 py-2 rounded-lg font-semibold shadow hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-400 transition disabled:opacity-50"
            >
              Generate PDF
            </button>
          </div>
        </div>

        {/* Data Preview */}
        <div className="bg-white rounded-xl shadow-lg border border-slate-200 p-8 w-full overflow-x-auto">
          <div className="flex flex-col sm:flex-row justify-between items-center mb-6 gap-2">
            <h2 className="text-2xl font-bold text-slate-900 tracking-tight">Time Entries <span className="text-blue-600 font-semibold">({timeEntries.length})</span></h2>
            {isLoading && (
              <div className="flex items-center gap-2">
                <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-600"></div>
                <span className="text-slate-600 text-base">Loading...</span>
              </div>
            )}
          </div>
          {timeEntries.length === 0 ? (
            <div className="text-center py-12 text-slate-500 text-lg font-medium">
              No time entries found
            </div>
          ) : (
            <div className="overflow-x-auto w-full">
              <table className="min-w-full divide-y divide-slate-200 text-base">
                <thead className="bg-slate-100">
                  <tr>
                    <th className="px-2 py-3 text-left text-xs font-bold text-slate-600 uppercase tracking-wider w-24">Date</th>
                    <th className="px-2 py-3 text-left text-xs font-bold text-slate-600 uppercase tracking-wider w-32">User</th>
                    <th className="px-2 py-3 text-left text-xs font-bold text-slate-600 uppercase tracking-wider w-32">Client</th>
                    <th className="px-2 py-3 text-left text-xs font-bold text-slate-600 uppercase tracking-wider w-40">Project</th>
                    <th className="px-2 py-3 text-left text-xs font-bold text-slate-600 uppercase tracking-wider w-32">Task / Bug Number</th>
                    <th className="px-2 py-3 text-right text-xs font-bold text-slate-600 uppercase tracking-wider w-16">Duration</th>
                    <th className="px-4 py-3 text-left text-xs font-bold text-slate-600 uppercase tracking-wider max-w-2xl">Note</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-slate-100">
                  {renderRows(grouped)}
                  <tr className="bg-blue-50 font-bold">
                    <td colSpan={6} className="py-2 px-4 text-right">Total</td>
                    <td className="py-2 px-4 text-right">{totalDuration}</td>
                  </tr>
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

================
File: app/database/To improve the readability and compactne.md
================
To improve the readability and compactness of your multi-page timesheet reports for each client, especially when some clients have over 10 pages per month, here are practical strategies you can implement:

✅ 1. Summarize with Subtotals
Group by project or task (if not already) — but:

Show daily entries only when needed (e.g., for billable audits).

Else, collapse to weekly/project summary.

✅ Example:

yaml
Copy
Edit
Project: LMS Redesign
  Week 1: 12.5h
  Week 2: 9.25h
  Week 3: 11.0h
  Week 4: 13.75h
  → Total: 46.5h
✅ 2. Use Weekly Summaries Instead of Daily Entries
Instead of showing each day, show weekly totals per project.

✅ Example Table:

Week	Project	Total Hours	Notes
Jul 1–7	LMS Redesign	12.5	Feature X, Testing
Jul 1–7	Website Revamp	8.0	Landing page, SEO
Jul 8–14	LMS Redesign	9.0	Bug Fixes, Planning

✅ 3. Avoid Repeating Headers
Make sure you only repeat section headers when necessary (e.g., on a new page), to save space.

✅ 4. Consolidate Columns
Only show columns that are necessary for the client.

Replace:

| Date | Start | End | Duration | Project | Task | Notes |

With something cleaner:

| Week | Project | Task Summary | Total Hrs |

✅ 5. Client-Facing Notes Only
If notes are detailed, trim internal details — only include client-relevant task summaries.

✅ 6. PDF Formatting Tips
Use landscape orientation for wider tables.

Reduce page margins if possible.

Use smaller but readable font (10–11px).

Fit 2 columns per page if clients have multiple projects.

✅ 7. Optional: Append Raw Data Separately
Have:

Summary section first (2–3 pages max)

Raw entries or detailed breakdown as appendix

================
File: app/preview/page.tsx
================
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';

interface TimeEntry {
  date: string;
  user: string;
  client: string;
  project: string;
  task: string;
  time_field_1307: string;
  duration: string;
  note: string;
}

interface ParsedData {
  client?: string;
  entries: TimeEntry[];
}

type GroupingOption = 'none' | 'date' | 'user' | 'client' | 'project' | 'task';

const GROUPING_OPTIONS: { value: GroupingOption; label: string }[] = [
  { value: 'none', label: 'No grouping' },
  { value: 'date', label: 'Date' },
  { value: 'user', label: 'User' },
  { value: 'client', label: 'Client' },
  { value: 'project', label: 'Project' },
  { value: 'task', label: 'Task' }
];

// Helper function to transform XML data to ParsedData format
function transformXmlData(xmlData: Record<string, unknown>): ParsedData {
  // Handle the XML structure: <rows><row>...</row></rows>
  if (xmlData.rows && (xmlData.rows as Record<string, unknown>).row) {
    const rowsData = (xmlData.rows as Record<string, unknown>).row;
    const rows = Array.isArray(rowsData) ? rowsData : [rowsData];
    
    const entries: TimeEntry[] = rows.map((row: Record<string, unknown>) => ({
      date: String(row.date || ''),
      user: String(row.user || ''),
      client: String(row.client || ''),
      project: String(row.project || ''),
      task: String(row.time_field_1307 || ''), // Use time_field_1307 as task
      time_field_1307: String(row.time_field_1307 || ''),
      duration: String(row.duration || '0'),
      note: String(row.note || '')
    }));

    // Get client name from first entry if available
    const client = entries.length > 0 ? entries[0].client : undefined;

    return {
      client,
      entries
    };
  }

  // Fallback: if data already has entries array, return as is
  if (xmlData.entries && Array.isArray(xmlData.entries)) {
    return xmlData as unknown as ParsedData;
  }

  // If no recognizable structure, return empty data
  return {
    client: undefined,
    entries: []
  };
}

export default function PreviewPage() {
  const [data, setData] = useState<ParsedData | null>(null);
  const [previewHtml, setPreviewHtml] = useState<string>('');
  const [isLoading, setIsLoading] = useState(false);
  const [groupBy1, setGroupBy1] = useState<GroupingOption>('date');
  const [groupBy2, setGroupBy2] = useState<GroupingOption>('none');
  const [groupBy3, setGroupBy3] = useState<GroupingOption>('none');
  const router = useRouter();

  useEffect(() => {
    const storedData = localStorage.getItem('parsedXmlData');
    if (!storedData) {
      router.push('/upload');
      return;
    }
    
    try {
      const parsedData = JSON.parse(storedData);
      const transformedData = transformXmlData(parsedData);
      
      if (transformedData.entries.length === 0) {
        console.error('No valid entries found in XML data');
        router.push('/upload');
        return;
      }
      
      setData(transformedData);
      // Generate initial preview
      generatePreview(transformedData, 'date', 'none', 'none');
    } catch (error) {
      console.error('Error parsing stored data:', error);
      router.push('/upload');
    }
  }, [router]);

  const buildGroupingKey = (entry: TimeEntry, level1: GroupingOption, level2: GroupingOption, level3: GroupingOption): string => {
    const parts: string[] = [];
    
    if (level1 !== 'none') {
      parts.push(getGroupValue(entry, level1));
    }
    if (level2 !== 'none') {
      parts.push(getGroupValue(entry, level2));
    }
    if (level3 !== 'none') {
      parts.push(getGroupValue(entry, level3));
    }
    
    return parts.join(' → ');
  };

  const getGroupValue = (entry: TimeEntry, groupBy: GroupingOption): string => {
    switch (groupBy) {
      case 'date': return entry.date;
      case 'user': return entry.user;
      case 'client': return entry.client;
      case 'project': return entry.project;
      case 'task': return entry.task || 'No Task';
      default: return '';
    }
  };

  const generatePreview = async (parsedData: ParsedData, level1: GroupingOption, level2: GroupingOption, level3: GroupingOption) => {
    setIsLoading(true);
    
    try {
      // Group the data according to the selected levels
      const groupedData = new Map<string, TimeEntry[]>();
      
      parsedData.entries.forEach(entry => {
        const groupKey = buildGroupingKey(entry, level1, level2, level3);
        if (!groupedData.has(groupKey)) {
          groupedData.set(groupKey, []);
        }
        groupedData.get(groupKey)!.push(entry);
      });

      // Generate the HTML content
      const htmlContent = generateTimesheetHTML(parsedData, groupedData, level1, level2, level3);
      setPreviewHtml(htmlContent);
    } catch (error) {
      console.error('Error generating preview:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const generateTimesheetHTML = (
    data: ParsedData, 
    groupedData: Map<string, TimeEntry[]>,
    level1: GroupingOption,
    level2: GroupingOption, 
    level3: GroupingOption
  ): string => {
    const totalHours = data.entries.reduce((sum, entry) => sum + parseFloat(entry.duration || '0'), 0);
    const totalEntries = data.entries.length;
    const uniqueUsers = [...new Set(data.entries.map(entry => entry.user))];
    const uniqueProjects = [...new Set(data.entries.map(entry => entry.project))];

    // Build grouping description
    const groupingLevels = [level1, level2, level3].filter(level => level !== 'none');
    const groupingDescription = groupingLevels.length > 0 
      ? `Grouped by: ${groupingLevels.map(level => level.charAt(0).toUpperCase() + level.slice(1)).join(' → ')}`
      : 'No grouping applied';

    // Show first 3 groups for preview
    const groupEntries = Array.from(groupedData.entries()).slice(0, 3);

    return `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <style>
          body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f8fafc;
            color: #1e293b;
            line-height: 1.6;
          }
          .container {
            max-width: 210mm;
            margin: 0 auto;
            background: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
          }
          .header {
            text-align: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 3px solid #3b82f6;
          }
          .client-name {
            font-size: 28px;
            font-weight: bold;
            color: #1e40af;
            margin-bottom: 10px;
            text-transform: uppercase;
            letter-spacing: 1px;
          }
          .report-title {
            font-size: 20px;
            color: #64748b;
            margin-bottom: 5px;
          }
          .grouping-info {
            font-size: 14px;
            color: #6b7280;
            font-style: italic;
            margin-top: 10px;
          }
          .summary-section {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
          }
          .summary-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
          }
          .summary-card h3 {
            margin: 0 0 10px 0;
            font-size: 14px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            opacity: 0.9;
          }
          .summary-card .value {
            font-size: 24px;
            font-weight: bold;
            margin: 0;
          }
          .details-section {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
          }
          .detail-card {
            background: #f8fafc;
            padding: 20px;
            border-radius: 8px;
            border-left: 4px solid #3b82f6;
          }
          .detail-card h3 {
            margin: 0 0 15px 0;
            color: #1e40af;
            font-size: 16px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
          }
          .detail-list {
            list-style: none;
            padding: 0;
            margin: 0;
          }
          .detail-list li {
            padding: 5px 0;
            border-bottom: 1px solid #e2e8f0;
            color: #475569;
          }
          .detail-list li:last-child {
            border-bottom: none;
          }
          .entries-section {
            margin-top: 30px;
          }
          .group-header {
            background: linear-gradient(135deg, #1e40af 0%, #3b82f6 100%);
            color: white;
            padding: 15px 20px;
            margin: 20px 0 0 0;
            border-radius: 8px 8px 0 0;
            font-weight: bold;
            font-size: 16px;
            display: flex;
            justify-content: space-between;
            align-items: center;
          }
          .group-stats {
            font-size: 14px;
            opacity: 0.9;
          }
          .entries-table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
            background: white;
            border-radius: 0 0 8px 8px;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
          }
          .entries-table th {
            background: #f1f5f9;
            padding: 12px 8px;
            text-align: left;
            font-weight: 600;
            color: #334155;
            font-size: 12px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            border-bottom: 2px solid #e2e8f0;
          }
          .entries-table td {
            padding: 10px 8px;
            border-bottom: 1px solid #f1f5f9;
            font-size: 13px;
            color: #475569;
          }
          .entries-table tr:hover {
            background-color: #f8fafc;
          }
          .duration-cell {
            font-weight: 600;
            color: #059669;
            text-align: right;
          }
          .note-cell {
            max-width: 300px;
            word-wrap: break-word;
            white-space: normal;
            line-height: 1.4;
          }
          .preview-notice {
            background: #fef3c7;
            border: 1px solid #f59e0b;
            color: #92400e;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            text-align: center;
            font-weight: 500;
          }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <div class="client-name">${data.client || 'Timesheet Report'}</div>
            <div class="report-title">Professional Timesheet Report</div>
            <div class="grouping-info">${groupingDescription}</div>
          </div>

          <div class="summary-section">
            <div class="summary-card">
              <h3>Total Hours</h3>
              <p class="value">${totalHours.toFixed(2)}</p>
            </div>
            <div class="summary-card">
              <h3>Total Entries</h3>
              <p class="value">${totalEntries}</p>
            </div>
            <div class="summary-card">
              <h3>Team Members</h3>
              <p class="value">${uniqueUsers.length}</p>
            </div>
            <div class="summary-card">
              <h3>Projects</h3>
              <p class="value">${uniqueProjects.length}</p>
            </div>
          </div>

          <div class="details-section">
            <div class="detail-card">
              <h3>Team Members</h3>
              <ul class="detail-list">
                ${uniqueUsers.map(user => `<li>${user}</li>`).join('')}
              </ul>
            </div>
            <div class="detail-card">
              <h3>Projects</h3>
              <ul class="detail-list">
                ${uniqueProjects.map(project => `<li>${project}</li>`).join('')}
              </ul>
            </div>
          </div>

          ${groupEntries.length > 0 ? `
            <div class="preview-notice">
              Preview showing first ${groupEntries.length} group(s) of ${groupedData.size} total groups
            </div>
          ` : ''}

          <div class="entries-section">
            ${groupEntries.map(([groupKey, entries]) => {
              const groupHours = entries.reduce((sum, entry) => sum + parseFloat(entry.duration || '0'), 0);
              return `
                <div class="group-header">
                  <span>${groupKey || 'All Entries'}</span>
                  <span class="group-stats">${entries.length} entries • ${groupHours.toFixed(2)} hours</span>
                </div>
                <table class="entries-table">
                  <thead>
                    <tr>
                      <th>Date</th>
                      <th>User</th>
                      <th>Client</th>
                      <th>Project</th>
                      <th>Task</th>
                      <th>Start Time</th>
                      <th>Duration</th>
                      <th>Note</th>
                    </tr>
                  </thead>
                  <tbody>
                    ${entries.map(entry => `
                      <tr>
                        <td>${entry.date}</td>
                        <td>${entry.user}</td>
                        <td>${entry.client}</td>
                        <td>${entry.project}</td>
                        <td>${entry.task || '-'}</td>
                        <td>${entry.time_field_1307}</td>
                        <td class="duration-cell">${entry.duration}h</td>
                        <td class="note-cell" title="${(entry.note || '').replace(/"/g, '&quot;')}">${entry.note || '-'}</td>
                      </tr>
                    `).join('')}
                  </tbody>
                </table>
              `;
            }).join('')}
          </div>
        </div>
      </body>
      </html>
    `;
  };

  const handlePreview = () => {
    if (data) {
      generatePreview(data, groupBy1, groupBy2, groupBy3);
    }
  };

  const handleGeneratePDF = async () => {
    if (!data) return;

    setIsLoading(true);
    try {
      // Build grouping parameter for the API
      const groupingLevels = [groupBy1, groupBy2, groupBy3].filter(level => level !== 'none');
      const groupingParam = groupingLevels.join(',');

      const response = await fetch('/api/generate-pdf', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          data, 
          grouping: groupingParam || 'date' 
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to generate PDF');
      }

      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.style.display = 'none';
      a.href = url;
      a.download = `timesheet-report-${new Date().toISOString().split('T')[0]}.pdf`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
    } catch (error) {
      console.error('Error generating PDF:', error);
      alert('Failed to generate PDF. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  if (!data) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Loading preview...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">PDF Preview</h1>
              <p className="text-sm text-gray-600">Review your timesheet report before generating PDF</p>
            </div>
            <div className="flex space-x-4">
              <button
                onClick={() => router.push('/upload')}
                className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                Upload New File
              </button>
              <button
                onClick={handleGeneratePDF}
                disabled={isLoading}
                className="px-6 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {isLoading ? 'Generating...' : 'Generate PDF'}
              </button>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Grouping Controls */}
        <div className="bg-white rounded-lg shadow-sm border p-6 mb-8">
          <h2 className="text-lg font-semibold text-gray-900 mb-4">Grouping Options</h2>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 items-end">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Primary Grouping
              </label>
              <select
                value={groupBy1}
                onChange={(e) => setGroupBy1(e.target.value as GroupingOption)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                {GROUPING_OPTIONS.map(option => (
                  <option key={option.value} value={option.value}>
                    {option.label}
                  </option>
                ))}
              </select>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Secondary Grouping
              </label>
              <select
                value={groupBy2}
                onChange={(e) => setGroupBy2(e.target.value as GroupingOption)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                {GROUPING_OPTIONS.map(option => (
                  <option key={option.value} value={option.value}>
                    {option.label}
                  </option>
                ))}
              </select>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Tertiary Grouping
              </label>
              <select
                value={groupBy3}
                onChange={(e) => setGroupBy3(e.target.value as GroupingOption)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                {GROUPING_OPTIONS.map(option => (
                  <option key={option.value} value={option.value}>
                    {option.label}
                  </option>
                ))}
              </select>
            </div>
            
            <div>
              <button
                onClick={handlePreview}
                disabled={isLoading}
                className="w-full px-4 py-2 text-sm font-medium text-white bg-green-600 border border-transparent rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {isLoading ? 'Loading...' : 'Preview'}
              </button>
            </div>
          </div>
          
          <div className="mt-4 text-sm text-gray-600">
            <p>
              <strong>Current grouping:</strong> {
                [groupBy1, groupBy2, groupBy3]
                  .filter(level => level !== 'none')
                  .map(level => level.charAt(0).toUpperCase() + level.slice(1))
                  .join(' → ') || 'No grouping'
              }
            </p>
          </div>
        </div>

        {/* Preview */}
        <div className="bg-white rounded-lg shadow-sm border overflow-hidden">
          <div className="bg-gray-50 px-6 py-4 border-b">
            <h2 className="text-lg font-semibold text-gray-900">Preview</h2>
            <p className="text-sm text-gray-600">This is how your PDF will look</p>
          </div>
          
          <div className="p-6">
            {previewHtml ? (
              <div 
                className="border border-gray-200 rounded-lg overflow-hidden"
                dangerouslySetInnerHTML={{ __html: previewHtml }}
              />
            ) : (
              <div className="text-center py-12">
                <div className="text-gray-400">
                  <svg className="mx-auto h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                  </svg>
                </div>
                <h3 className="mt-2 text-sm font-medium text-gray-900">No preview available</h3>
                <p className="mt-1 text-sm text-gray-500">Click "Preview" to generate a preview of your PDF</p>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: app/progress-report/page.tsx
================
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';

interface TimeEntry {
  id: string;
  date: string;
  user: string;
  project: string;
  task: string;
  description: string;
  hours: number;
  taskNumber?: string;
}

interface ParsedData {
  entries: TimeEntry[];
  summary: {
    totalHours: number;
    totalDays: number;
    users: string[];
    projects: string[];
  };
}

interface GroupedProgress {
  [user: string]: {
    projects: {
      [project: string]: {
        tasks: Array<{
          taskNumber?: string;
          description: string;
          hours: number;
          dates: string[];
        }>;
        totalHours: number;
      };
    };
    leave?: Array<{ date: string; reason: string }>;
    publicHolidays?: Array<{ date: string; reason: string }>;
    totalHours: number;
  };
}

interface XmlRow {
  id?: string;
  date?: string;
  user?: string;
  project?: string;
  time_field_1307?: string;
  duration?: string;
  note?: string;
  [key: string]: unknown;
}

interface XmlData {
  rows?: {
    row?: XmlRow | XmlRow[];
  };
  [key: string]: unknown;
}

export default function ProgressReportPage() {
  const [parsedData, setParsedData] = useState<ParsedData | null>(null);
  const [groupedProgress, setGroupedProgress] = useState<GroupedProgress>({});
  const [isLoading, setIsLoading] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [aiPrompt, setAiPrompt] = useState<string>('');
  const [aiAnalysis, setAiAnalysis] = useState<string>('');
  const [isAnalyzing, setIsAnalyzing] = useState(false);

  const router = useRouter();

  const extractTaskNumber = (task: string): string | undefined => {
    const match = task.match(/#(\d+)/);
    return match ? match[1] : undefined;
  };

  const transformXmlData = (xmlData: XmlData): ParsedData => {
    const entries: TimeEntry[] = [];
    
    // Handle the XML structure: <rows><row>...</row></rows>
    if (xmlData.rows && (xmlData.rows as Record<string, unknown>).row) {
      const rowsData = (xmlData.rows as Record<string, unknown>).row;
      const rows = Array.isArray(rowsData) ? rowsData : [rowsData];
      
      rows.forEach((row: XmlRow) => {
        const entry: TimeEntry = {
          id: String(row.id || ''),
          date: String(row.date || ''),
          user: String(row.user || ''),
          project: String(row.project || ''),
          task: String(row.time_field_1307 || ''), // Use time_field_1307 as task
          description: String(row.note || ''),
          hours: parseFloat(String(row.duration || '0')),
          taskNumber: extractTaskNumber(String(row.time_field_1307 || ''))
        };
        entries.push(entry);
      });
    }

    const users = [...new Set(entries.map(entry => entry.user))];
    const projects = [...new Set(entries.map(entry => entry.project))];
    const totalHours = entries.reduce((sum, entry) => sum + entry.hours, 0);
    const totalDays = [...new Set(entries.map(entry => entry.date))].length;

    return {
      entries,
      summary: {
        totalHours,
        totalDays,
        users,
        projects
      }
    };
  };

  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    if (!file.name.endsWith('.xml')) {
      setError('Please upload an XML file');
      return;
    }

    setIsUploading(true);
    setError(null);

    try {
      const formData = new FormData();
      formData.append('file', file);

      const response = await fetch('/api/parse-xml', {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        throw new Error('Failed to parse XML file');
      }

      const data = await response.json();
      console.log('Raw XML data:', data); // Debug log
      
      const transformedData = transformXmlData(data);
      console.log('Transformed data:', transformedData); // Debug log
      
      setParsedData(transformedData);
      processData(transformedData);
      
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
    } finally {
      setIsUploading(false);
    }
  };

  const processData = (data: ParsedData) => {
    console.log('Processing data with entries:', data.entries.length); // Debug log
    const grouped: GroupedProgress = {};

    data.entries.forEach(entry => {
      console.log('Processing entry:', entry); // Debug log
      
      if (!grouped[entry.user]) {
        grouped[entry.user] = {
          projects: {},
          totalHours: 0
        };
      }

      // Check if this is a public holiday entry
      const isPublicHoliday = entry.project.toLowerCase().includes('public holiday') || 
                             entry.task.toLowerCase().includes('public holiday') ||
                             entry.description.toLowerCase().includes('public holiday') ||
                             entry.project.toLowerCase().includes('public holidays') ||
                             entry.task.toLowerCase().includes('public holidays') ||
                             entry.description.toLowerCase().includes('public holidays');

      // Check if this is a regular leave entry (not public holiday)
      const isLeave = (entry.project.toLowerCase().includes('leave') || 
                      entry.task.toLowerCase().includes('leave') ||
                      entry.description.toLowerCase().includes('leave')) && !isPublicHoliday;

      if (isPublicHoliday) {
        if (!grouped[entry.user].publicHolidays) {
          grouped[entry.user].publicHolidays = [];
        }
        grouped[entry.user].publicHolidays?.push({
          date: entry.date,
          reason: entry.description || entry.task || 'Public Holiday'
        });
      } else if (isLeave) {
        if (!grouped[entry.user].leave) {
          grouped[entry.user].leave = [];
        }
        grouped[entry.user].leave?.push({
          date: entry.date,
          reason: entry.description || entry.task || 'Leave'
        });
      } else {
        if (!grouped[entry.user].projects[entry.project]) {
          grouped[entry.user].projects[entry.project] = {
            tasks: [],
            totalHours: 0
          };
        }

        // Find existing task with same task number or description
        const existingTaskIndex = grouped[entry.user].projects[entry.project].tasks.findIndex(task => {
          if (entry.taskNumber && task.taskNumber) {
            return task.taskNumber === entry.taskNumber;
          }
          return task.description === entry.description;
        });

        if (existingTaskIndex >= 0) {
          // Update existing task
          const existingTask = grouped[entry.user].projects[entry.project].tasks[existingTaskIndex];
          existingTask.hours += entry.hours;
          if (!existingTask.dates.includes(entry.date)) {
            existingTask.dates.push(entry.date);
          }
        } else {
          // Add new task
          grouped[entry.user].projects[entry.project].tasks.push({
            taskNumber: entry.taskNumber,
            description: entry.description,
            hours: entry.hours,
            dates: [entry.date]
          });
        }

        grouped[entry.user].projects[entry.project].totalHours += entry.hours;
      }

      grouped[entry.user].totalHours += entry.hours;
    });

    console.log('Grouped progress:', grouped); // Debug log
    setGroupedProgress(grouped);
  };

  const generateReportText = () => {
    if (!groupedProgress || Object.keys(groupedProgress).length === 0) {
      return '';
    }

    let report = `Here are the team's progress for the last 2 weeks as follows.\n\n`;

    Object.entries(groupedProgress).forEach(([user, userData]) => {
      report += `${user}\n`;

      // Add projects
      Object.entries(userData.projects).forEach(([project, projectData]) => {
        if (projectData.tasks.length > 0) {
          report += `${project}\n`;
          projectData.tasks.forEach(task => {
            const taskPrefix = task.taskNumber ? `#${task.taskNumber} | ` : '';
            const datesInfo = task.dates.length > 1 ? ` (${task.dates.join(', ')})` : '';
            report += `${taskPrefix}${task.description}${datesInfo}\n`;
          });
          report += '\n';
        }
      });

      // Add public holiday information
      if (userData.publicHolidays && userData.publicHolidays.length > 0) {
        const holidayDates = userData.publicHolidays.map(holiday => holiday.date).join(', ');
        report += `${holidayDates} - Public Holiday\n\n`;
      }

      // Add leave information
      if (userData.leave && userData.leave.length > 0) {
        const leaveDates = userData.leave.map(leave => leave.date).join(', ');
        report += `${leaveDates} - Leave\n\n`;
      }

      report += '\n';
    });

    return report;
  };

  const handleGenerateReport = async () => {
    if (!parsedData) return;

    setIsLoading(true);
    try {
      const response = await fetch('/api/generate-progress-report', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          groupedProgress,
          reportText: generateReportText()
        }),
      });

      if (response.ok) {
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `team-progress-report.txt`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
      } else {
        console.error('Failed to generate report');
      }
    } catch (error) {
      console.error('Error generating report:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleAiAnalysis = async () => {
    if (!parsedData || !aiPrompt.trim()) return;

    setIsAnalyzing(true);
    setAiAnalysis('');

    try {
      const response = await fetch('/api/ai-analysis', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          prompt: aiPrompt,
          data: {
            entries: parsedData.entries,
            summary: parsedData.summary,
            groupedProgress
          }
        }),
      });

      if (response.ok) {
        const result = await response.json();
        setAiAnalysis(result.analysis);
      } else {
        setError('Failed to generate AI analysis');
      }
    } catch (error) {
      setError('Error generating AI analysis');
      console.error('Error:', error);
    } finally {
      setIsAnalyzing(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-6xl mx-auto px-4">
        {/* Header */}
        <div className="mb-8">
          <button
            onClick={() => router.push('/')}
            className="text-blue-600 hover:text-blue-800 mb-4 inline-block"
          >
            ← Back to Home
          </button>
          <h1 className="text-3xl font-bold text-gray-900">Team Progress Report Generator</h1>
          <p className="mt-2 text-gray-600">
            Upload an XML file to generate a professional team progress report with AI analysis
          </p>
        </div>

        {/* Upload Section */}
        <div className="bg-white rounded-lg shadow-md p-6 mb-6">
          <h2 className="text-xl font-semibold text-gray-900 mb-4">Upload XML File</h2>
          
          <div className="space-y-4">
            <div className="flex items-center justify-center w-full">
              <label className="flex flex-col items-center justify-center w-full h-32 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 hover:bg-gray-100">
                <div className="flex flex-col items-center justify-center pt-5 pb-6">
                  <svg className="w-8 h-8 mb-4 text-gray-500" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 16">
                    <path stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 13h3a3 3 0 0 0 0-6h-.025A5.56 5.56 0 0 0 16 6.5 5.5 5.5 0 0 0 5.207 5.021C5.137 5.017 5.071 5 5 5a4 4 0 0 0 0 8h2.167M10 15V6m0 0L8 8m2-2 2 2"/>
                  </svg>
                  <p className="mb-2 text-sm text-gray-500">
                    <span className="font-semibold">Click to upload</span> or drag and drop
                  </p>
                  <p className="text-xs text-gray-500">XML files only</p>
                </div>
                <input 
                  type="file" 
                  className="hidden" 
                  accept=".xml"
                  onChange={handleFileUpload}
                  disabled={isUploading}
                />
              </label>
            </div>

            {error && (
              <div className="bg-red-50 border border-red-200 rounded-md p-4">
                <p className="text-red-800">{error}</p>
              </div>
            )}

            {isUploading && (
              <div className="flex items-center justify-center py-4">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-green-600"></div>
                <span className="ml-2 text-gray-600">Processing XML...</span>
              </div>
            )}
          </div>
        </div>

        {/* AI Analysis Section */}
        {parsedData && (
          <div className="bg-white rounded-lg shadow-md p-6 mb-6">
            <h2 className="text-xl font-semibold text-gray-900 mb-4">AI Analysis</h2>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Analysis Prompt
                </label>
                <textarea
                  value={aiPrompt}
                  onChange={(e) => setAiPrompt(e.target.value)}
                  placeholder="Enter your analysis prompt here. For example: 'Analyze team productivity trends and identify areas for improvement' or 'Summarize the most time-consuming tasks and suggest optimization strategies'"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  rows={4}
                />
              </div>
              
              <button
                onClick={handleAiAnalysis}
                disabled={isAnalyzing || !aiPrompt.trim()}
                className="bg-purple-600 text-white px-6 py-2 rounded-md hover:bg-purple-700 disabled:bg-gray-400 disabled:cursor-not-allowed"
              >
                {isAnalyzing ? 'Analyzing...' : 'Generate AI Analysis'}
              </button>

              {aiAnalysis && (
                <div className="mt-4 p-4 bg-purple-50 border border-purple-200 rounded-md">
                  <h3 className="font-semibold text-purple-900 mb-2">AI Analysis Results:</h3>
                  <div className="text-purple-800 whitespace-pre-wrap">{aiAnalysis}</div>
                </div>
              )}
            </div>
          </div>
        )}

        {/* Generate Report Button */}
        {parsedData && (
          <div className="bg-white rounded-lg shadow-md p-6 mb-6">
            <div className="flex gap-4">
              <button
                onClick={handleGenerateReport}
                disabled={isLoading}
                className="bg-green-600 text-white px-6 py-2 rounded-md hover:bg-green-700 disabled:bg-gray-400 disabled:cursor-not-allowed"
              >
                {isLoading ? 'Generating...' : 'Generate Report'}
              </button>
            </div>
          </div>
        )}

        {/* Preview Section */}
        {parsedData && (
          <div className="bg-white rounded-lg shadow-md p-6">
            <h2 className="text-xl font-semibold text-gray-900 mb-4">Report Preview</h2>
            
            {Object.keys(groupedProgress).length > 0 ? (
              <div className="space-y-6">
                {Object.entries(groupedProgress).map(([user, userData]) => (
                  <div key={user} className="border border-gray-200 rounded-lg p-4">
                    <h3 className="text-lg font-semibold text-gray-900 mb-3">{user}</h3>
                    
                    {Object.entries(userData.projects).map(([project, projectData]) => {
                      if (projectData.tasks.length > 0) {
                        return (
                          <div key={project} className="mb-4">
                            <h4 className="font-medium text-gray-800 mb-2">{project}</h4>
                            <div className="space-y-1 ml-4">
                              {projectData.tasks.map((task, index) => (
                                <div key={index} className="text-sm text-gray-700">
                                  {task.taskNumber && <span className="font-mono text-blue-600">#{task.taskNumber}</span>}
                                  {task.taskNumber && ' | '}
                                  {task.description}
                                  {task.dates.length > 1 && (
                                    <span className="text-gray-500 text-xs ml-2">
                                      ({task.dates.join(', ')})
                                    </span>
                                  )}
                                </div>
                              ))}
                            </div>
                          </div>
                        );
                      }
                      return null;
                    })}

                    {userData.publicHolidays && userData.publicHolidays.length > 0 && (
                      <div className="mt-3">
                        <div className="text-sm text-orange-600 font-medium">
                          {userData.publicHolidays.map(holiday => holiday.date).join(', ')} - Public Holiday
                        </div>
                      </div>
                    )}

                    {userData.leave && userData.leave.length > 0 && (
                      <div className="mt-3">
                        <div className="text-sm text-red-600 font-medium">
                          {userData.leave.map(leave => leave.date).join(', ')} - Leave
                        </div>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            ) : (
              <p className="text-gray-600">No data to display.</p>
            )}
          </div>
        )}
      </div>
    </div>
  );
}

================
File: app/select-report/page.tsx
================
'use client';

import { useRouter } from 'next/navigation';

export default function SelectReportPage() {
  const router = useRouter();

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50">
      <div className="bg-white rounded-lg shadow-lg p-10 flex flex-col items-center gap-8">
        <h1 className="text-2xl font-bold text-gray-900 mb-4">Choose Report Type</h1>
        <div className="flex flex-col md:flex-row gap-6 w-full justify-center">
          <button
            onClick={() => router.push('/preview')}
            className="bg-blue-600 text-white px-8 py-4 rounded-lg text-lg font-semibold shadow hover:bg-blue-700 transition"
          >
            PDF Generator
          </button>
          <button
            onClick={() => router.push('/progress-report')}
            className="bg-green-600 text-white px-8 py-4 rounded-lg text-lg font-semibold shadow hover:bg-green-700 transition"
          >
            Progress Report
          </button>
        </div>
        <button
          onClick={() => router.push('/')}
          className="mt-8 text-gray-500 hover:text-gray-700 underline"
        >
          Back to Upload
        </button>
      </div>
    </div>
  );
}

================
File: app/team-summary/page.tsx
================
'use client';

import React, { useState, useEffect } from 'react';
import Link from 'next/link';

interface TeamMember {
  id: number;
  name: string;
  login: string;
}

interface Client {
  id: number;
  name: string;
}

interface TimeEntry {
  user_id: number;
  client_id: number | null;
  project_id: number | null;
  duration: string;
  billable: number;
  user_name: string;
  user_login: string;
  client_name: string | null;
}

interface TeamSummaryData {
  name: string;
  paidHours: number;
  workedHours: number;
  leaveHours: number;
  publicHolidayHours: number;
  chargedHours: number;
  chargedPercentage: number;
  clientHours: Record<string, number>;
}

export default function TeamSummaryPage() {
  const [teamData, setTeamData] = useState<TeamSummaryData[]>([]);
  const [allUsers, setAllUsers] = useState<TeamMember[]>([]);
  const [selectedUsers, setSelectedUsers] = useState<number[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [dateFrom, setDateFrom] = useState<string>('2025-07-01');
  const [dateTo, setDateTo] = useState<string>('2025-07-31');

  useEffect(() => {
    loadTeamSummary();
  }, []);

  // Reload data when selected users change
  useEffect(() => {
    if (allUsers.length > 0 && selectedUsers.length > 0) {
      loadTeamSummary();
    }
  }, [selectedUsers]);

  const loadTeamSummary = async () => {
    try {
      setIsLoading(true);
      setError(null);

      const response = await fetch(`/api/database?action=teamSummary&date_from=${dateFrom}&date_to=${dateTo}`);
      if (!response.ok) {
        throw new Error('Failed to fetch team summary data');
      }

      const { users, clients, timeEntries, leaveProjectId, holidayProjectId, workingDays } = await response.json();

      // Store all users and initialize selected users (all selected by default)
      setAllUsers(users);
      if (selectedUsers.length === 0) {
        setSelectedUsers(users.map((user: TeamMember) => user.id));
      }

      // Helper function to convert duration string to hours
      const durationToHours = (duration: string): number => {
        if (!duration) return 0;
        const [h, m] = duration.split(':').map(Number);
        return h + (m || 0) / 60;
      };

      // Process data for each user (filter by selected users)
      const filteredUsers = users.filter((user: TeamMember) => selectedUsers.includes(user.id));
      const processedData: TeamSummaryData[] = filteredUsers.map((user: TeamMember) => {
        const userEntries = timeEntries.filter((entry: TimeEntry) => entry.user_id === user.id);
        
        // Calculate metrics
        const paidHours = workingDays * 8; // Working days * 8 hours
        const workedHours = userEntries.reduce((total: number, entry: TimeEntry) => 
          total + durationToHours(entry.duration), 0);
        const leaveHours = userEntries
          .filter((entry: TimeEntry) => entry.project_id === leaveProjectId)
          .reduce((total: number, entry: TimeEntry) => total + durationToHours(entry.duration), 0);
        const publicHolidayHours = userEntries
          .filter((entry: TimeEntry) => entry.project_id === holidayProjectId)
          .reduce((total: number, entry: TimeEntry) => total + durationToHours(entry.duration), 0);
        const chargedHours = userEntries
          .filter((entry: TimeEntry) => entry.billable === 1)
          .reduce((total: number, entry: TimeEntry) => total + durationToHours(entry.duration), 0);
        const chargedPercentage = paidHours > 0 ? (chargedHours / paidHours) * 100 : 0;
        
        // Calculate client hours
        const clientHours: Record<string, number> = {};
        clients.forEach((client: Client) => {
          const clientTotal = userEntries
            .filter((entry: TimeEntry) => entry.client_id === client.id && entry.billable === 1)
            .reduce((total: number, entry: TimeEntry) => total + durationToHours(entry.duration), 0);
          if (clientTotal > 0) {
            clientHours[client.name] = clientTotal;
          }
        });

        return {
          name: user.name,
          paidHours,
          workedHours,
          leaveHours,
          publicHolidayHours,
          chargedHours,
          chargedPercentage,
          clientHours
        };
      });

      setTeamData(processedData);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to load team summary');
    } finally {
      setIsLoading(false);
    }
  };

  const calculateTotals = () => {
    const totals = teamData.reduce((acc, member) => ({
      paidHours: acc.paidHours + member.paidHours,
      workedHours: acc.workedHours + member.workedHours,
      leaveHours: acc.leaveHours + member.leaveHours,
      publicHolidayHours: acc.publicHolidayHours + member.publicHolidayHours,
      chargedHours: acc.chargedHours + member.chargedHours,
      clientHours: { ...acc.clientHours }
    }), {
      paidHours: 0,
      workedHours: 0,
      leaveHours: 0,
      publicHolidayHours: 0,
      chargedHours: 0,
      clientHours: {} as Record<string, number>
    });
    
    // Aggregate client hours
    teamData.forEach(member => {
      Object.entries(member.clientHours).forEach(([clientName, hours]) => {
        totals.clientHours[clientName] = (totals.clientHours[clientName] || 0) + hours;
      });
    });
    
    return totals;
  };

  const totals = calculateTotals();
  const totalChargedPercentage = totals.paidHours > 0 ? (totals.chargedHours / totals.paidHours) * 100 : 0;

  // User selection functions
  const handleUserToggle = (userId: number) => {
    setSelectedUsers(prev => 
      prev.includes(userId) 
        ? prev.filter(id => id !== userId)
        : [...prev, userId]
    );
  };

  const handleSelectAll = () => {
    setSelectedUsers(allUsers.map(user => user.id));
  };

  const handleDeselectAll = () => {
    setSelectedUsers([]);
  };

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 py-8">
        <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="bg-red-50 border border-red-200 rounded-md p-4">
            <p className="text-red-800">{error}</p>
            <button 
              onClick={loadTeamSummary}
              className="mt-2 bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700"
            >
              Retry
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 py-10 w-full">
      <div className="w-full max-w-[1600px] mx-auto px-4 sm:px-8">
        {/* Header */}
        <div className="mb-10 flex flex-col gap-2 sm:gap-0 sm:flex-row sm:items-center sm:justify-between border-b border-slate-200 pb-6">
          <div>
            <Link 
              href="/" 
              className="text-blue-600 hover:text-blue-800 text-base font-medium transition-colors"
            >
              ← Back to Home
            </Link>
            <h1 className="text-4xl font-extrabold text-slate-900 mt-2 tracking-tight">Team Summary Report</h1>
            <p className="mt-1 text-lg text-slate-600 font-normal">Overview of team productivity and client billing</p>
          </div>
        </div>

        {/* Filters Section */}
        <div className="bg-white rounded-xl shadow-md border border-slate-200 p-6 mb-8">
          <h2 className="text-xl font-semibold text-slate-900 mb-4">Filters</h2>
          
          {/* Date Range */}
          <div className="mb-6">
            <h3 className="text-lg font-medium text-slate-800 mb-3">Filter Period</h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <label className="block text-sm font-semibold text-slate-700 mb-2">Date From</label>
                <input 
                  type="date"
                  value={dateFrom}
                  onChange={(e) => setDateFrom(e.target.value)}
                  className="w-full border border-slate-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-slate-50 text-base"
                />
              </div>
              <div>
                <label className="block text-sm font-semibold text-slate-700 mb-2">Date To</label>
                <input 
                  type="date"
                  value={dateTo}
                  onChange={(e) => setDateTo(e.target.value)}
                  className="w-full border border-slate-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-slate-50 text-base"
                />
              </div>
              <div className="flex items-end">
                <button
                  onClick={loadTeamSummary}
                  disabled={isLoading}
                  className="bg-blue-600 text-white px-6 py-2 rounded-lg font-semibold shadow hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-400 transition disabled:opacity-50"
                >
                  {isLoading ? 'Loading...' : 'Update Report'}
                </button>
              </div>
            </div>
          </div>

          {/* User Selection */}
          <div>
            <div className="flex items-center justify-between mb-3">
              <h3 className="text-lg font-medium text-slate-800">Select Team Members</h3>
              <div className="flex gap-2">
                <button
                  onClick={handleSelectAll}
                  className="text-sm text-blue-600 hover:text-blue-800 font-medium"
                >
                  Select all
                </button>
                <span className="text-slate-400">/</span>
                <button
                  onClick={handleDeselectAll}
                  className="text-sm text-blue-600 hover:text-blue-800 font-medium"
                >
                  Deselect all
                </button>
              </div>
            </div>
            <div className="bg-slate-50 rounded-lg p-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
              {allUsers.map(user => (
                <label key={user.id} className="flex items-center space-x-2 cursor-pointer hover:bg-slate-100 p-2 rounded">
                  <input
                    type="checkbox"
                    checked={selectedUsers.includes(user.id)}
                    onChange={() => handleUserToggle(user.id)}
                    className="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                  />
                  <span className="text-sm font-medium text-slate-700">{user.name}</span>
                </label>
              ))}
            </div>
          </div>
        </div>

        {/* Summary Table */}
        <div className="bg-white rounded-xl shadow-lg border border-slate-200 overflow-hidden">
          <div className="p-6 border-b border-slate-200">
            <h2 className="text-2xl font-bold text-slate-900">Team Performance Summary</h2>
            <p className="text-slate-600 mt-1">Hours breakdown and client distribution</p>
          </div>
          
          {isLoading ? (
            <div className="p-8 text-center">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
              <p className="text-slate-600 mt-2">Loading team summary...</p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full">
                <thead className="bg-slate-100">
                  <tr>
                    <th className="px-4 py-3 text-left text-xs font-bold text-slate-600 uppercase tracking-wider border-r border-slate-200">Team Member</th>
                    <th className="px-4 py-3 text-center text-xs font-bold text-slate-600 uppercase tracking-wider border-r border-slate-200">Paid Hours</th>
                    <th className="px-4 py-3 text-center text-xs font-bold text-slate-600 uppercase tracking-wider border-r border-slate-200">Worked Hours</th>
                    <th className="px-4 py-3 text-center text-xs font-bold text-slate-600 uppercase tracking-wider border-r border-slate-200">Leave Hours</th>
                    <th className="px-4 py-3 text-center text-xs font-bold text-slate-600 uppercase tracking-wider border-r border-slate-200">Public Holiday</th>
                    <th className="px-4 py-3 text-center text-xs font-bold text-slate-600 uppercase tracking-wider border-r border-slate-200">Charged Hours</th>
                    <th className="px-4 py-3 text-center text-xs font-bold text-slate-600 uppercase tracking-wider border-r border-slate-200">% Charged</th>
                    <th className="px-4 py-3 text-center text-xs font-bold text-green-600 uppercase tracking-wider">Client Hours</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-slate-100">
                  {teamData.map((member, index) => (
                    <tr key={index} className="hover:bg-slate-50">
                      <td className="px-4 py-4 whitespace-nowrap text-sm font-semibold text-slate-900 border-r border-slate-200">{member.name}</td>
                      <td className="px-4 py-4 whitespace-nowrap text-sm text-center text-slate-700 border-r border-slate-200">{member.paidHours}</td>
                      <td className="px-4 py-4 whitespace-nowrap text-sm text-center text-slate-700 border-r border-slate-200">{member.workedHours.toFixed(1)}</td>
                      <td className="px-4 py-4 whitespace-nowrap text-sm text-center text-slate-700 border-r border-slate-200">{member.leaveHours.toFixed(1)}</td>
                      <td className="px-4 py-4 whitespace-nowrap text-sm text-center text-slate-700 border-r border-slate-200">{member.publicHolidayHours.toFixed(1)}</td>
                      <td className="px-4 py-4 whitespace-nowrap text-sm text-center font-semibold text-green-700 border-r border-slate-200">{member.chargedHours.toFixed(1)}</td>
                      <td className="px-4 py-4 whitespace-nowrap text-sm text-center font-semibold text-green-700 border-r border-slate-200">{member.chargedPercentage.toFixed(2)}%</td>
                      <td className="px-4 py-4 whitespace-nowrap text-sm text-center text-green-600">
                        {Object.entries(member.clientHours).map(([client, hours]) => (
                          <div key={client} className="text-xs">
                            {client}: {hours.toFixed(1)}h
                          </div>
                        ))}
                      </td>
                    </tr>
                  ))}
                  {/* Totals Row */}
                  <tr className="bg-blue-50 border-t-2 border-blue-200 font-bold">
                    <td className="px-4 py-4 whitespace-nowrap text-sm font-bold text-slate-900 border-r border-slate-200">TOTAL</td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-center font-bold text-slate-900 border-r border-slate-200">{totals.paidHours}</td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-center font-bold text-slate-900 border-r border-slate-200">{totals.workedHours.toFixed(1)}</td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-center font-bold text-slate-900 border-r border-slate-200">{totals.leaveHours.toFixed(1)}</td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-center font-bold text-slate-900 border-r border-slate-200">{totals.publicHolidayHours.toFixed(1)}</td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-center font-bold text-green-700 border-r border-slate-200">{totals.chargedHours.toFixed(1)}</td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-center font-bold text-green-700 border-r border-slate-200">{totalChargedPercentage.toFixed(2)}%</td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-center font-bold text-green-600">
                      {Object.entries(totals.clientHours).map(([client, hours]) => (
                        <div key={client} className="text-xs">
                          {client}: {hours.toFixed(1)}h
                        </div>
                      ))}
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          )}
        </div>

        {/* Action Buttons */}
        <div className="mt-8 flex gap-4">
          <button
            className="bg-green-600 text-white px-6 py-3 rounded-lg font-semibold shadow hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-400 transition"
          >
            Export to Excel
          </button>
          <button
            className="bg-purple-600 text-white px-6 py-3 rounded-lg font-semibold shadow hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-400 transition"
          >
            Generate PDF Report
          </button>
        </div>
      </div>
    </div>
  );
}

================
File: app/upload/page.tsx
================
'use client';

import { useState } from 'react';
import Link from 'next/link';

interface ParsedData {
  [key: string]: any;
}

export default function UploadPage() {
  const [parsedData, setParsedData] = useState<ParsedData | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    if (!file.name.endsWith('.xml')) {
      setError('Please upload an XML file');
      return;
    }

    setIsLoading(true);
    setError(null);

    try {
      const formData = new FormData();
      formData.append('file', file);

      const response = await fetch('/api/parse-xml', {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        throw new Error('Failed to parse XML file');
      }

      const data = await response.json();
      setParsedData(data);
      
      // Store data in localStorage for preview page
      localStorage.setItem('parsedXmlData', JSON.stringify(data));
      
      // Redirect to select-report page
      window.location.href = '/select-report';
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
    } finally {
      setIsLoading(false);
    }
  };



  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="mb-8">
          <Link 
            href="/" 
            className="text-blue-600 hover:text-blue-800 mb-4 inline-block"
          >
            ← Back to Home
          </Link>
          <h1 className="text-3xl font-bold text-gray-900">XML to PDF Generator</h1>
          <p className="mt-2 text-gray-600">
            Upload an XML file to parse and generate a PDF document
          </p>
        </div>

        {/* Upload Section */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6">
          <h2 className="text-xl font-semibold text-gray-900 mb-4">Upload XML File</h2>
          
          <div className="space-y-4">
            <div className="flex items-center justify-center w-full">
              <label className="flex flex-col items-center justify-center w-full h-32 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 hover:bg-gray-100">
                <div className="flex flex-col items-center justify-center pt-5 pb-6">
                  <svg className="w-8 h-8 mb-4 text-gray-500" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 16">
                    <path stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 13h3a3 3 0 0 0 0-6h-.025A5.56 5.56 0 0 0 16 6.5 5.5 5.5 0 0 0 5.207 5.021C5.137 5.017 5.071 5 5 5a4 4 0 0 0 0 8h2.167M10 15V6m0 0L8 8m2-2 2 2"/>
                  </svg>
                  <p className="mb-2 text-sm text-gray-500">
                    <span className="font-semibold">Click to upload</span> or drag and drop
                  </p>
                  <p className="text-xs text-gray-500">XML files only</p>
                </div>
                <input 
                  type="file" 
                  className="hidden" 
                  accept=".xml"
                  onChange={handleFileUpload}
                  disabled={isLoading}
                />
              </label>
            </div>

            {error && (
              <div className="bg-red-50 border border-red-200 rounded-md p-4">
                <p className="text-red-800">{error}</p>
              </div>
            )}

            {isLoading && (
              <div className="flex items-center justify-center py-4">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                <span className="ml-2 text-gray-600">Processing...</span>
              </div>
            )}
          </div>
        </div>

        {/* Success Message */}
        {parsedData && (
          <div className="bg-green-50 border border-green-200 rounded-md p-4 mb-6">
            <div className="flex items-center">
              <svg className="w-5 h-5 text-green-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
              </svg>
              <p className="text-green-800 font-medium">XML file parsed successfully! Redirecting to preview...</p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

================
File: app/globals.css
================
@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}

================
File: app/layout.tsx
================
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "XML to PDF Generator",
  description: "Upload XML files and generate beautiful PDF documents",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}

================
File: app/page.tsx
================
import Image from "next/image";
import Link from "next/link";

export default function Home() {
  return (
    <div className="grid grid-rows-[20px_1fr_20px] items-center justify-items-center min-h-screen p-8 pb-20 gap-16 sm:p-20 font-[family-name:var(--font-geist-sans)]">
      <main className="flex flex-col gap-[32px] row-start-2 items-center sm:items-start">
        
        
        <div className="text-center sm:text-left">
          <h1 className="text-4xl font-bold text-gray-900 mb-4">Timesheet PDF Generator for SBOS Dev Team</h1>
          <p className="text-gray-600 mb-6 max-w-lg">
            Transform your Anuko Time Tracker data into professional PDF reports. Perfect for development teams needing clean, structured timesheet documentation for clients and project management.
          </p>
          
          <div className="flex flex-col sm:flex-row gap-4">
          <Link
              href="/database"
              className="inline-flex items-center justify-center bg-purple-600 hover:bg-purple-700 text-white font-medium py-3 px-6 rounded-lg transition-colors"
            >
              <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4" />
              </svg>
              Direct Database
            </Link>

            <Link
              href="/upload"
              className="inline-flex items-center justify-center bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-6 rounded-lg transition-colors"
            >
              <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
              </svg>
              Import XML Export
            </Link>
            
            {/*             <Link
              href="/progress-report"
              className="inline-flex items-center justify-center bg-green-600 hover:bg-green-700 text-white font-medium py-3 px-6 rounded-lg transition-colors"
            >
              <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
              Progress Reports
            </Link> */}
            <Link
              href="/team-summary"
              className="inline-flex items-center justify-center bg-indigo-600 hover:bg-indigo-700 text-white font-medium py-3 px-6 rounded-lg transition-colors"
            >
              <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
              </svg>
              Team Summary
            </Link>
          </div>
        </div>

        <div className="bg-gray-50 rounded-lg p-6 max-w-lg">
          <h2 className="text-lg font-semibold text-gray-900 mb-3">For Development Teams:</h2>
          <ol className="list-decimal list-inside space-y-2 text-sm text-gray-600">
            <li>Export your Anuko Time Tracker data as XML or connect directly to the database</li>
            <li>Filter by client, project, user, or date range to focus on specific work</li>
            <li>Preview your data with smart grouping and subtotals</li>
            <li>Generate professional PDF reports with clean formatting and structure</li>
            <li>View team summary reports with billing percentages and client breakdowns</li>
            <li>Perfect for client billing, project reviews, and team productivity analysis</li>
          </ol>
        </div>

        <div className="bg-blue-50 rounded-lg p-6 max-w-lg border border-blue-200">
          <h2 className="text-lg font-semibold text-blue-900 mb-3">Features:</h2>
          <ul className="list-disc list-inside space-y-2 text-sm text-blue-800">
            <li>Multi-level grouping (by user, client, project, date)</li>
            <li>Billable hours filtering and calculation</li>
            <li>Professional PDF layout with proper formatting</li>
            <li>Task and bug number tracking</li>
            <li>Duration calculations and totals</li>
          </ul>
        </div>

        <div className="flex gap-4 items-center flex-col sm:flex-row">
          <a
            className="rounded-full border border-solid border-transparent transition-colors flex items-center justify-center bg-foreground text-background gap-2 hover:bg-[#383838] dark:hover:bg-[#ccc] font-medium text-sm sm:text-base h-10 sm:h-12 px-4 sm:px-5 sm:w-auto"
            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
          >
            <Image
              className="dark:invert"
              src="/vercel.svg"
              alt="Vercel logomark"
              width={20}
              height={20}
            />
            Deploy now
          </a>
          <a
            className="rounded-full border border-solid border-black/[.08] dark:border-white/[.145] transition-colors flex items-center justify-center hover:bg-[#f2f2f2] dark:hover:bg-[#1a1a1a] hover:border-transparent font-medium text-sm sm:text-base h-10 sm:h-12 px-4 sm:px-5 w-full sm:w-auto md:w-[158px]"
            href="https://nextjs.org/docs?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
          >
            Read our docs
          </a>
        </div>
      </main>
      <footer className="row-start-3 flex gap-[24px] flex-wrap items-center justify-center">
        <a
          className="flex items-center gap-2 hover:underline hover:underline-offset-4"
          href="https://nextjs.org/learn?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          <Image
            aria-hidden
            src="/file.svg"
            alt="File icon"
            width={16}
            height={16}
          />
          Learn
        </a>
        <a
          className="flex items-center gap-2 hover:underline hover:underline-offset-4"
          href="https://vercel.com/templates?framework=next.js&utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          <Image
            aria-hidden
            src="/window.svg"
            alt="Window icon"
            width={16}
            height={16}
          />
          Examples
        </a>
        <a
          className="flex items-center gap-2 hover:underline hover:underline-offset-4"
          href="https://nextjs.org?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          <Image
            aria-hidden
            src="/globe.svg"
            alt="Globe icon"
            width={16}
            height={16}
          />
          Go to nextjs.org →
        </a>
      </footer>
    </div>
  );
}

================
File: lib/config/database.ts
================
export interface DatabaseConfig {
  host: string;
  port: number;
  user: string;
  password: string;
  database: string;
  charset: string;
  timezone: string;
  dateStrings: boolean;
}

const getDatabaseConfig = (): DatabaseConfig => {
  const isProduction = process.env.NODE_ENV === 'production';
  
  if (isProduction) {
    return {
      host: process.env.DB_HOST || 'localhost',
      port: parseInt(process.env.DB_PORT || '3306'),
      user: process.env.DB_USER || 'sbosdevlk_timetracker',
      password: process.env.DB_PASSWORD || 'Xi4Kkc.Ya;[VGqWA',
      database: process.env.DB_NAME || 'sbosdevlk_timetracker',
      charset: 'utf8mb4',
      timezone: '+00:00',
      dateStrings: true
    };
  }
  
  // Development configuration
  return {
    host: process.env.DB_HOST || 'localhost',
    port: parseInt(process.env.DB_PORT || '3306'),
    user: process.env.DB_USER || 'root',
    password: process.env.DB_PASSWORD || 'password',
    database: process.env.DB_NAME || 'sbosdevlk_timetracker',
    charset: 'utf8mb4',
    timezone: '+00:00',
    dateStrings: true
  };
};

export const dbConfig = getDatabaseConfig();

================
File: lib/config/README.md
================
# Database Configuration

This directory contains environment-specific database configurations for the PDF Generator App.

## Configuration Files

- `database.ts` - Main database configuration with environment detection
- `README.md` - This documentation file

## Environment Variables

The application uses the following environment variables for database configuration:

| Variable | Description | Default (Dev) | Default (Prod) |
|----------|-------------|---------------|----------------|
| `DB_HOST` | Database host | `localhost` | `localhost` |
| `DB_PORT` | Database port | `3306` | `3306` |
| `DB_USER` | Database username | `root` | `sbosdevlk_timetracker` |
| `DB_PASSWORD` | Database password | `password` | `Xi4Kkc.Ya;[VGqWA` |
| `DB_NAME` | Database name | `sbosdevlk_timetracker` | `sbosdevlk_timetracker` |

## Setup Instructions

1. Copy `env.example` to `.env.local` in the project root
2. Update the values in `.env.local` for your local development environment
3. For production, set the environment variables in your deployment platform

## Environment Detection

The configuration automatically detects the environment:
- **Development**: Uses development defaults when `NODE_ENV` is not 'production'
- **Production**: Uses production defaults when `NODE_ENV` is 'production'

## Usage

```typescript
import { dbConfig } from './lib/config/database';

// The configuration is automatically loaded based on environment
console.log(dbConfig.host); // Will show appropriate host for current environment
```

================
File: lib/database.ts
================
import mysql from 'mysql2/promise';
import { dbConfig } from './config/database';

export interface TimeEntry {
  id: number;
  user_id: number;
  group_id: number;
  date: string;
  start: string | null;
  duration: string | null;
  client_id: number | null;
  project_id: number | null;
  task_id: number | null;
  comment: string | null;
  billable: number;
  approved: number;
  paid: number;
  created: string;
  modified: string;
  status: number;
}

export interface User {
  id: number;
  login: string;
  name: string;
  group_id: number;
  role_id: number | null;
  rate: number;
  email: string | null;
  status: number;
}

export interface Project {
  id: number;
  group_id: number;
  name: string;
  description: string | null;
  status: number;
}

export interface Task {
  id: number;
  group_id: number;
  name: string;
  description: string | null;
  status: number;
}

export interface Client {
  id: number;
  group_id: number;
  name: string;
  address: string | null;
  tax: number;
  status: number;
}

export async function getConnection() {
  try {
    console.log('Attempting to connect to database with config:', {
      host: dbConfig.host,
      port: dbConfig.port,
      user: dbConfig.user,
      database: dbConfig.database
    });
    const connection = await mysql.createConnection(dbConfig);
    console.log('Database connection established successfully');
    return connection;
  } catch (error) {
    console.error('Failed to connect to database:', error);
    throw error;
  }
}

export async function getTimeEntries() {
  const connection = await getConnection();
  try {
    console.log('Executing getTimeEntries with no limit');
    const [rows] = await connection.query(`
      SELECT 
        l.*,
        DATE(l.date) as date,
        u.name as user_name,
        u.login as user_login,
        p.name as project_name,
        t.name as task_name,
        c.name as client_name,
        cf.value as task_number
      FROM tt_log l
      LEFT JOIN tt_users u ON l.user_id = u.id
      LEFT JOIN tt_projects p ON l.project_id = p.id
      LEFT JOIN tt_tasks t ON l.task_id = t.id
      LEFT JOIN tt_clients c ON l.client_id = c.id
      LEFT JOIN tt_custom_field_log cf ON cf.log_id = l.id AND cf.field_id = 2 AND cf.status = 1
      WHERE l.status = 1
      ORDER BY l.date ASC, l.created ASC
    `);
    console.log('Query executed successfully, rows returned:', Array.isArray(rows) ? rows.length : 'not an array');
    return rows;
  } catch (error) {
    console.error('Error in getTimeEntries:', error);
    throw error;
  } finally {
    await connection.end();
  }
}

export async function getUsers() {
  const connection = await getConnection();
  try {
    console.log('Executing getUsers query');
    const [rows] = await connection.query(`
      SELECT * FROM tt_users 
      WHERE status = 1 
      ORDER BY name
    `);
    console.log('getUsers query executed successfully');
    return rows;
  } catch (error) {
    console.error('Error in getUsers:', error);
    throw error;
  } finally {
    await connection.end();
  }
}

export async function getProjects() {
  const connection = await getConnection();
  try {
    console.log('Executing getProjects query');
    const [rows] = await connection.query(`
      SELECT * FROM tt_projects 
      WHERE status = 1 
      ORDER BY name
    `);
    console.log('getProjects query executed successfully');
    return rows;
  } catch (error) {
    console.error('Error in getProjects:', error);
    throw error;
  } finally {
    await connection.end();
  }
}

export async function getTasks() {
  const connection = await getConnection();
  try {
    console.log('Executing getTasks query');
    const [rows] = await connection.query(`
      SELECT * FROM tt_tasks 
      WHERE status = 1 
      ORDER BY name
    `);
    console.log('getTasks query executed successfully');
    return rows;
  } catch (error) {
    console.error('Error in getTasks:', error);
    throw error;
  } finally {
    await connection.end();
  }
}

export async function getClients() {
  const connection = await getConnection();
  try {
    console.log('Executing getClients query');
    const [rows] = await connection.query(`
      SELECT * FROM tt_clients 
      WHERE status = 1 
      ORDER BY name
    `);
    console.log('getClients query executed successfully');
    return rows;
  } catch (error) {
    console.error('Error in getClients:', error);
    throw error;
  } finally {
    await connection.end();
  }
}

export async function getProjectsByClient(clientId: number) {
  const connection = await getConnection();
  try {
    const [rows] = await connection.query(`
      SELECT p.* FROM tt_projects p
      INNER JOIN tt_client_project_binds b ON p.id = b.project_id
      WHERE b.client_id = ? AND p.status = 1
      ORDER BY p.name
    `, [clientId]);
    return rows;
  } catch (error) {
    console.error('Error in getProjectsByClient:', error);
    throw error;
  } finally {
    await connection.end();
  }
}

export async function testConnection() {
  const connection = await getConnection();
  try {
    console.log('Testing database connection...');
    const [rows] = await connection.query('SELECT 1 as test');
    console.log('Connection test successful:', rows);
    return true;
  } catch (error) {
    console.error('Connection test failed:', error);
    throw error;
  } finally {
    await connection.end();
  }
}

export async function getDateRange() {
  const connection = await getConnection();
  try {
    console.log('Getting date range from database...');
    const [rows] = await connection.query(`
      SELECT 
        DATE(MIN(date)) as min_date,
        DATE(MAX(date)) as max_date
      FROM tt_log 
      WHERE status = 1
    `);
    console.log('Date range query executed successfully:', rows);
    return Array.isArray(rows) && rows.length > 0 ? rows[0] : null;
  } catch (error) {
    console.error('Error in getDateRange:', error);
    throw error;
  } finally {
    await connection.end();
  }
}

export async function getTeamSummaryData(dateFrom: string, dateTo: string) {
  const connection = await getConnection();
  try {
    console.log('Getting team summary data for period:', dateFrom, 'to', dateTo);
    
    // Get all users
    const [users] = await connection.query(`
      SELECT id, login, name FROM tt_users 
      WHERE status = 1 
      ORDER BY name
    `);
    
    // Get leave project ID
    const [leaveProjects] = await connection.query(`
      SELECT id FROM tt_projects 
      WHERE name LIKE '%Leave%' OR name LIKE '%Out of Office%' 
      LIMIT 1
    `);
    const leaveProjectId = Array.isArray(leaveProjects) && leaveProjects.length > 0 ? (leaveProjects[0] as {id: number}).id : null;
    
    // Get public holiday project ID
    const [holidayProjects] = await connection.query(`
      SELECT id FROM tt_projects 
      WHERE name LIKE '%Public Holiday%' OR name LIKE '%Holiday%' 
      LIMIT 1
    `);
    const holidayProjectId = Array.isArray(holidayProjects) && holidayProjects.length > 0 ? (holidayProjects[0] as {id: number}).id : null;
    
    // Get all clients
    const [clients] = await connection.query(`
      SELECT id, name FROM tt_clients 
      WHERE status = 1 
      ORDER BY name
    `);
    
    // Get time entries for the period
    const [timeEntries] = await connection.query(`
      SELECT 
        l.user_id,
        l.client_id,
        l.project_id,
        l.duration,
        l.billable,
        u.name as user_name,
        u.login as user_login,
        c.name as client_name
      FROM tt_log l
      LEFT JOIN tt_users u ON l.user_id = u.id
      LEFT JOIN tt_clients c ON l.client_id = c.id
      WHERE l.status = 1 
        AND l.date >= ? 
        AND l.date <= ?
      ORDER BY u.name, l.date
    `, [dateFrom, dateTo]);
    
    // Calculate working days in the period
    const startDate = new Date(dateFrom);
    const endDate = new Date(dateTo);
    let workingDays = 0;
    const currentDate = new Date(startDate);
    
    while (currentDate <= endDate) {
      const dayOfWeek = currentDate.getDay();
      // Skip weekends (0 = Sunday, 6 = Saturday)
      if (dayOfWeek !== 0 && dayOfWeek !== 6) {
        workingDays++;
      }
      currentDate.setDate(currentDate.getDate() + 1);
    }
    
    return {
      users: Array.isArray(users) ? users : [],
      clients: Array.isArray(clients) ? clients : [],
      timeEntries: Array.isArray(timeEntries) ? timeEntries : [],
      leaveProjectId,
      holidayProjectId,
      workingDays
    };
  } catch (error) {
    console.error('Error in getTeamSummaryData:', error);
    throw error;
  } finally {
    await connection.end();
  }
}

export async function getFilteredTimeEntries(filters: {
  user_id?: number;
  project_id?: number | number[];
  task_id?: number;
  client_id?: number;
  billable?: number;
  date_from?: string;
  date_to?: string;
}) {
  const connection = await getConnection();
  try {
    console.log('Executing getFilteredTimeEntries with filters:', filters);
    let whereClause = 'WHERE l.status = 1';
    if (filters.user_id) {
      whereClause += ` AND l.user_id = ${Number(filters.user_id)}`;
    }
    if (filters.project_id) {
      if (Array.isArray(filters.project_id)) {
        whereClause += ` AND l.project_id IN (${filters.project_id.map(Number).join(',')})`;
      } else {
        whereClause += ` AND l.project_id = ${Number(filters.project_id)}`;
      }
    }
    if (filters.task_id) {
      whereClause += ` AND l.task_id = ${Number(filters.task_id)}`;
    }
    if (filters.client_id) {
      whereClause += ` AND l.client_id = ${Number(filters.client_id)}`;
    }
    if (filters.billable === 1) {
      whereClause += ' AND l.billable = 1';
    }
    if (filters.date_from) {
      whereClause += ` AND l.date >= '${filters.date_from}'`;
    }
    if (filters.date_to) {
      whereClause += ` AND l.date <= '${filters.date_to}'`;
    }
    console.log('Building SQL query with direct string interpolation');
    const [rows] = await connection.query(`
      SELECT 
        l.*,
        DATE(l.date) as date,
        u.name as user_name,
        u.login as user_login,
        p.name as project_name,
        t.name as task_name,
        c.name as client_name,
        cf.value as task_number
      FROM tt_log l
      LEFT JOIN tt_users u ON l.user_id = u.id
      LEFT JOIN tt_projects p ON l.project_id = p.id
      LEFT JOIN tt_tasks t ON l.task_id = t.id
      LEFT JOIN tt_clients c ON l.client_id = c.id
      LEFT JOIN tt_custom_field_log cf ON cf.log_id = l.id AND cf.field_id = 2 AND cf.status = 1
      ${whereClause}
      ORDER BY l.date ASC, l.created ASC
    `);
    console.log('getFilteredTimeEntries query executed successfully');
    return rows;
  } catch (error) {
    console.error('Error in getFilteredTimeEntries:', error);
    throw error;
  } finally {
    await connection.end();
  }
}

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: env.example
================
# Database Configuration
# Copy this file to .env.local and update with your local values

# Development Database (defaults to localhost)
DB_HOST=localhost
DB_PORT=3306
DB_USER=root
DB_PASSWORD=password
DB_NAME=sbosdevlk_timetracker

# Production Database (uncomment and update for production)
# DB_HOST=your-production-host
# DB_PORT=3306
# DB_USER=sbosdevlk_timetracker
# DB_PASSWORD=your-production-password
# DB_NAME=sbosdevlk_timetracker

================
File: eslint.config.mjs
================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;

================
File: mysql-timetracker.txt
================
mysqli://sbosdevlk_timetracker:Xi4Kkc.Ya;[VGqWA@localhost/sbosdevlk_timetracker?charset=utf8mb4
Access Hosts: 155.254.26.68
Access Port: 3306
Access User: sbosdevlk_timetracker
Access Password: Xi4Kkc.Ya;[VGqWA
Access Database: sbosdevlk_timetracker
Access Charset: utf8mb4
Access Collation: utf8mb4_unicode_ci
Access Engine: InnoDB
Access Row Format: Dynamic
Access Row Format: Dynamic

================
File: mysql.sql
================
# Usage: 
# 1) Create a database using the "CREATE DATABASE" mysql command.
# 2) Then, execute this script from command prompt with a command like this:
# mysql -h host -u user -p -D db_name < mysql.sql

# create database timetracker character set = 'utf8mb4';

# use timetracker;


#
# Structure for table tt_groups. A group is a unit of users for whom we are tracking work time.
# This table stores settings common to all group members such as language, week start day, etc.
#
CREATE TABLE `tt_groups` (
  `id` int(11) NOT NULL auto_increment,                  # group id
  `parent_id` int(11) default NULL,                      # parent group id
  `org_id` int(11) default NULL,                         # organization id (id of top group)
  `group_key` varchar(32) default NULL,                  # group key
  `name` varchar(80) default NULL,                       # group name
  `description` varchar(255) default NULL,               # group description
  `currency` varchar(7) default NULL,                    # currency symbol
  `decimal_mark` char(1) NOT NULL default '.',           # separator in decimals
  `lang` varchar(10) NOT NULL default 'en',              # language
  `date_format` varchar(20) NOT NULL default '%Y-%m-%d', # date format
  `time_format` varchar(20) NOT NULL default '%H:%M',    # time format
  `week_start` smallint(2) NOT NULL default 0,           # Week start day, 0 == Sunday.
  `tracking_mode` smallint(2) NOT NULL default 1,        # tracking mode ("time", "projects" or "projects and tasks")
  `project_required` smallint(2) NOT NULL default 0,     # whether a project selection is required or optional
  `record_type` smallint(2) NOT NULL default 0,          # time record type ("start and finish", "duration", or both)
  `bcc_email` varchar(100) default NULL,                 # bcc email to copy all reports to
  `allow_ip` varchar(255) default NULL,                  # specification from where users are allowed access
  `password_complexity` varchar(64) default NULL,        # password example that defines required complexity
  `plugins` varchar(255) default NULL,                   # a list of enabled plugins for group
  `lock_spec` varchar(255) default NULL,                 # Cron specification for record locking,
                                                         # for example: "0 10 * * 1" for "weekly on Mon at 10:00".
  `holidays` text default NULL,                          # holidays specification
  `workday_minutes` smallint(4) default 480,             # number of work minutes in a regular working day
  `custom_logo` tinyint(4) default 0,                    # whether to use a custom logo or not
  `config` text default NULL,                            # miscellaneous group configuration settings
  `custom_css` text default NULL,                        # custom css for group
  `custom_translation` text default NULL,                # custom translation for group
  `created` datetime default NULL,                       # creation timestamp
  `created_ip` varchar(45) default NULL,                 # creator ip
  `created_by` int(11) default NULL,                     # creator user_id
  `modified` datetime default NULL,                      # modification timestamp
  `modified_ip` varchar(45) default NULL,                # modifier ip
  `modified_by` int(11) default NULL,                    # modifier user_id
  `entities_modified` datetime default NULL,             # modification timestamp of group entities (clients, projects, etc.)
  `status` tinyint(4) default 1,                         # group status
  PRIMARY KEY (`id`)
);


#
# Structure for table tt_roles. This table stores group roles.
#
CREATE TABLE `tt_roles` (
  `id` int(11) NOT NULL auto_increment,    # Role id. Identifies roles for all groups on the server.
  `group_id` int(11) NOT NULL,             # Group id the role is defined for.
  `org_id` int(11) default NULL,           # Organization id.
  `name` varchar(80) default NULL,         # Role name - custom role name. In case we are editing a
                                           # predefined role (USER, etc.), we can rename the role here.
  `description` varchar(255) default NULL, # Role description.
  `rank` int(11) default 0,                # Role rank, an integer value between 0-512. Predefined role ranks:
                                           # User - 4, Supervisor - 12, Client - 16,
                                           # Co-manager - 68, Manager - 324, Top manager - 512.
                                           # Rank is used to determine what "lesser roles" are in each group
                                           # for situations such as "manage_users".
  `rights` text default NULL,              # Comma-separated list of rights assigned to a role.
                                           # NULL here for predefined roles (4, 16, 68, 324 - manager)
                                           # means a hard-coded set of default access rights.
  `status` tinyint(4) default 1,           # Role status.
  PRIMARY KEY  (`id`)
);

# Create an index that guarantees unique active and inactive role ranks in each group.
create unique index role_idx on tt_roles(group_id, `rank`, status);

# Insert site-wide roles - site administrator and top manager.
INSERT INTO `tt_roles` (`group_id`, `name`, `rank`, `rights`) VALUES (0, 'Site administrator', 1024, 'administer_site');
INSERT INTO `tt_roles` (`group_id`, `name`, `rank`, `rights`) VALUES (0, 'Top manager', 512, 'track_own_time,track_own_expenses,view_own_reports,view_own_charts,view_own_projects,view_own_tasks,manage_own_settings,view_users,view_client_reports,view_client_invoices,track_time,track_expenses,view_reports,approve_reports,approve_timesheets,view_charts,view_own_clients,override_punch_mode,override_own_punch_mode,override_date_lock,override_own_date_lock,swap_roles,manage_own_account,manage_users,manage_projects,manage_tasks,manage_custom_fields,manage_clients,manage_invoices,override_allow_ip,manage_basic_settings,view_all_charts,view_all_reports,manage_features,manage_advanced_settings,manage_roles,export_data,approve_all_reports,approve_own_timesheets,manage_subgroups,view_client_unapproved,override_2fa,delete_group');


#
# Structure for table tt_users. This table is used to store user properties.
#
CREATE TABLE `tt_users` (
  `id` int(11) NOT NULL auto_increment,            # user id
  `login` varchar(80) COLLATE utf8mb4_bin NOT NULL,# user login
  `password` varchar(50) default NULL,             # password hash
  `name` varchar(80) default NULL,                 # user name
  `group_id` int(11) NOT NULL,                     # group id
  `org_id` int(11) default NULL,                   # organization id
  `role_id` int(11) default NULL,                  # role id
  `client_id` int(11) default NULL,                # client id for "client" user role
  `rate` float(6,2) NOT NULL default '0.00',       # default hourly rate
  `quota_percent` float(6,2) NOT NULL default '100.00', # percent of time quota
  `email` varchar(100) default NULL,               # user email
  `created` datetime default NULL,                 # creation timestamp
  `created_ip` varchar(45) default NULL,           # creator ip
  `created_by` int(11) default NULL,               # creator user_id (null for self)
  `modified` datetime default NULL,                # modification timestamp
  `modified_ip` varchar(45) default NULL,          # modifier ip
  `modified_by` int(11) default NULL,              # modifier user_id
  `accessed` datetime default NULL,                # last access timestamp
  `accessed_ip` varchar(45) default NULL,          # last access ip
  `status` tinyint(4) default 1,                   # user status
  PRIMARY KEY (`id`)
);

# Create an index that guarantees unique active and inactive logins.
create unique index login_idx on tt_users(login, status);

# Create admin account with password 'secret'. Admin is a superuser who can create groups.
DELETE from `tt_users` WHERE login = 'admin';
INSERT INTO `tt_users` (`login`, `password`, `name`, `group_id`, `role_id`) VALUES ('admin', md5('secret'), 'Admin', '0', (select id from tt_roles where `rank` = 1024));


#
# Structure for table tt_projects.
#
CREATE TABLE `tt_projects` (
  `id` int(11) NOT NULL auto_increment,            # project id
  `group_id` int(11) NOT NULL,                     # group id
  `org_id` int(11) default NULL,                   # organization id
  `name` varchar(80) COLLATE utf8mb4_bin NOT NULL, # project name
  `description` varchar(255) default NULL,         # project description
  `tasks` text default NULL,                       # comma-separated list of task ids associated with this project
  `status` tinyint(4) default 1,                   # project status
  PRIMARY KEY (`id`)
);

# Create an index that guarantees unique active and inactive projects per group.
create unique index project_idx on tt_projects(group_id, name, status);


#
# Structure for table tt_tasks.
#
CREATE TABLE `tt_tasks` (
  `id` int(11) NOT NULL auto_increment,            # task id
  `group_id` int(11) NOT NULL,                     # group id
  `org_id` int(11) default NULL,                   # organization id
  `name` varchar(80) COLLATE utf8mb4_bin NOT NULL, # task name
  `description` varchar(255) default NULL,         # task description
  `status` tinyint(4) default 1,                   # task status
  PRIMARY KEY (`id`)
);

# Create an index that guarantees unique active and inactive tasks per group.
create unique index task_idx on tt_tasks(group_id, name, status);


#
# Structure for table tt_user_project_binds. This table maps users to assigned projects.
#
CREATE TABLE `tt_user_project_binds` (
  `id` int(11) NOT NULL auto_increment, # bind id
  `user_id` int(11) NOT NULL,           # user id
  `project_id` int(11) NOT NULL,        # project id
  `group_id` int(11) default NULL,      # group id
  `org_id` int(11) default NULL,        # organization id
  `rate` float(6,2) default '0.00',     # rate for this user when working on this project
  `status` tinyint(4) default 1,        # bind status
  PRIMARY KEY (`id`)
);

# Create an index that guarantees unique user to project binds.
create unique index bind_idx on tt_user_project_binds(user_id, project_id);


#
# Structure for table tt_project_task_binds. This table maps projects to assigned tasks.
#
CREATE TABLE `tt_project_task_binds` (
  `project_id` int(11) NOT NULL,        # project id
  `task_id` int(11) NOT NULL,           # task id
  `group_id` int(11) default NULL,      # group id
  `org_id` int(11) default NULL         # organization id
);

# Indexes for tt_project_task_binds.
create index project_idx on tt_project_task_binds(project_id);
create index task_idx on tt_project_task_binds(task_id);
create unique index project_task_idx on tt_project_task_binds(project_id, task_id);


#
# Structure for table tt_log. This is the table where time entries for users are stored.
# If you use custom fields, additional info for each record may exist in tt_custom_field_log.
#
CREATE TABLE `tt_log` (
  `id` bigint NOT NULL auto_increment,             # time record id
  `user_id` int(11) NOT NULL,                      # user id
  `group_id` int(11) default NULL,                 # group id
  `org_id` int(11) default NULL,                   # organization id
  `date` date NOT NULL,                            # date the record is for
  `start` time default NULL,                       # record start time (for example, 09:00)
  `duration` time default NULL,                    # record duration (for example, 1 hour)
  `client_id` int(11) default NULL,                # client id
  `project_id` int(11) default NULL,               # project id
  `task_id` int(11) default NULL,                  # task id
  `timesheet_id` int(11) default NULL,             # timesheet id
  `invoice_id` int(11) default NULL,               # invoice id
  `comment` text,                                  # user provided comment for time record
  `billable` tinyint(4) default 0,                 # whether the record is billable or not
  `approved` tinyint(4) default 0,                 # whether the record is approved
  `paid` tinyint(4) default 0,                     # whether the record is paid
  `created` datetime default NULL,                 # creation timestamp
  `created_ip` varchar(45) default NULL,           # creator ip
  `created_by` int(11) default NULL,               # creator user_id
  `modified` datetime default NULL,                # modification timestamp
  `modified_ip` varchar(45) default NULL,          # modifier ip
  `modified_by` int(11) default NULL,              # modifier user_id
  `status` tinyint(4) default 1,                   # time record status
  PRIMARY KEY (`id`)
);

# Create indexes on tt_log for performance.
create index date_idx on tt_log(date);
create index user_idx on tt_log(user_id);
create index group_idx on tt_log(group_id);
create index client_idx on tt_log(client_id);
create index invoice_idx on tt_log(invoice_id);
create index project_idx on tt_log(project_id);
create index task_idx on tt_log(task_id);
create index timesheet_idx on tt_log(timesheet_id);


#
# Structure for table tt_invoices. Invoices are issued to clients for billable work.
#
CREATE TABLE `tt_invoices` (
  `id` int(11) NOT NULL auto_increment,            # invoice id
  `group_id` int(11) NOT NULL,                     # group id
  `org_id` int(11) default NULL,                   # organization id
  `name` varchar(80) COLLATE utf8mb4_bin NOT NULL, # invoice name
  `date` date NOT NULL,                            # invoice date
  `client_id` int(11) NOT NULL,                    # client id
  `status` tinyint(4) default 1,                   # invoice status
  PRIMARY KEY (`id`)
);

# Create an index that guarantees unique invoice names per group.
create unique index name_idx on tt_invoices(group_id, name, status);


#
# Structure for table tt_tmp_refs. Used for reset password mechanism.
#
CREATE TABLE `tt_tmp_refs` (
  `created` datetime default NULL,                 # creation timestamp
  `ref` char(32) NOT NULL default '',              # unique reference for user, used in urls
  `user_id` int(11) NOT NULL                       # user id
);


#
# Structure for table tt_fav_reports. Favorite reports are pre-configured report configurations.
#
CREATE TABLE `tt_fav_reports` (
  `id` int(11) NOT NULL auto_increment,                  # favorite report id
  `name` varchar(200) NOT NULL,                          # favorite report name
  `user_id` int(11) NOT NULL,                            # user id favorite report belongs to
  `group_id` int(11) default NULL,                       # group id
  `org_id` int(11) default NULL,                         # organization id
  `report_spec` text default NULL,                       # future replacement field for all report settings
  `client_id` int(11) default NULL,                      # client id (if selected)
  `project_id` int(11) default NULL,                     # project id (if selected)
  `task_id` int(11) default NULL,                        # task id (if selected)
  `billable` tinyint(4) default NULL,                    # whether to include billable, not billable, or all records
  `approved` tinyint(4) default NULL,                    # whether to include approved, unapproved, or all records
  `invoice` tinyint(4) default NULL,                     # whether to include invoiced, not invoiced, or all records
  `timesheet` tinyint(4) default NULL,                   # include records with a specific timesheet status, or all records
  `paid_status` tinyint(4) default NULL,                 # whether to include paid, not paid, or all records
  `note_containing` varchar(80) default NULL,            # include only records with notes containing this text
  `users` text default NULL,                             # Comma-separated list of user ids. Nothing here means "all" users.
  `period` tinyint(4) default NULL,                      # selected period type for report
  `period_start` date default NULL,                      # period start
  `period_end` date default NULL,                        # period end
  `show_client` tinyint(4) NOT NULL default 0,           # whether to show client column
  `show_invoice` tinyint(4) NOT NULL default 0,          # whether to show invoice column
  `show_paid` tinyint(4) NOT NULL default 0,             # whether to show paid column
  `show_ip` tinyint(4) NOT NULL default 0,               # whether to show ip column
  `show_project` tinyint(4) NOT NULL default 0,          # whether to show project column
  `show_timesheet` tinyint(4) NOT NULL default 0,        # whether to show timesheet column
  `show_start` tinyint(4) NOT NULL default 0,            # whether to show start field
  `show_duration` tinyint(4) NOT NULL default 0,         # whether to show duration field
  `show_cost` tinyint(4) NOT NULL default 0,             # whether to show cost field
  `show_task` tinyint(4) NOT NULL default 0,             # whether to show task column
  `show_end` tinyint(4) NOT NULL default 0,              # whether to show end field
  `show_note` tinyint(4) NOT NULL default 0,             # whether to show note column
  `show_approved` tinyint(4) NOT NULL default 0,         # whether to show approved column
  `show_work_units` tinyint(4) NOT NULL default 0,       # whether to show work units
  `show_totals_only` tinyint(4) NOT NULL default 0,      # whether to show totals only
  `group_by1` varchar(20) default NULL,                  # group by field 1
  `group_by2` varchar(20) default NULL,                  # group by field 2
  `group_by3` varchar(20) default NULL,                  # group by field 3
  `status` tinyint(4) default 1,                         # favorite report status
  PRIMARY KEY (`id`)
);


#
# Structure for table tt_cron. It is used to email favorite reports on schedule.
#
CREATE TABLE `tt_cron` (
  `id` int(11) NOT NULL auto_increment,         # entry id
  `group_id` int(11) NOT NULL,                  # group id
  `org_id` int(11) default NULL,                # organization id
  `cron_spec` varchar(255) NOT NULL,            # cron specification, "0 1 * * *" for "daily at 01:00"
  `last` int(11) default NULL,                  # UNIX timestamp of when job was last run
  `next` int(11) default NULL,                  # UNIX timestamp of when to run next job
  `report_id` int(11) default NULL,             # report id from tt_fav_reports, a report to mail on schedule
  `email` varchar(100) default NULL,            # email to send results to
  `cc` varchar(100) default NULL,               # cc email to send results to
  `subject` varchar(100) default NULL,          # email subject
  `comment` text,                               # user provided comment for notification
  `report_condition` varchar(255) default NULL, # report condition, "count > 0" for sending not empty reports
  `status` tinyint(4) default 1,                # entry status
  PRIMARY KEY (`id`)
);


#
# Structure for table tt_clients. A client is an entity for whom work is performed and who may be invoiced.
#
CREATE TABLE `tt_clients` (
  `id` int(11) NOT NULL AUTO_INCREMENT,            # client id
  `group_id` int(11) NOT NULL,                     # group id
  `org_id` int(11) default NULL,                   # organization id
  `name` varchar(80) COLLATE utf8mb4_bin NOT NULL, # client name
  `address` varchar(255) default NULL,             # client address
  `tax` float(6,2) default '0.00',                 # applicable tax for this client
  `projects` text default NULL,                    # comma-separated list of project ids assigned to this client
  `status` tinyint(4) default 1,                   # client status
  PRIMARY KEY (`id`)
);

# Create an index that guarantees unique active and inactive clients per group.
create unique index client_name_idx on tt_clients(group_id, name, status);


#
# Structure for table tt_client_project_binds. This table maps clients to assigned projects.
#
CREATE TABLE `tt_client_project_binds` (
  `client_id` int(11) NOT NULL,                    # client id
  `project_id` int(11) NOT NULL,                   # project id
  `group_id` int(11) default NULL,                 # group id
  `org_id` int(11) default NULL                    # organization id
);

# Indexes for tt_client_project_binds.
create index client_idx on tt_client_project_binds(client_id);
create index project_idx on tt_client_project_binds(project_id);
create unique index client_project_idx on tt_client_project_binds(client_id, project_id);


#
# Structure for table tt_config. This table is used to store configuration info for users.
# For example, last_report_email parameter stores an email for user last report was emailed to.
#
CREATE TABLE `tt_config` (
  `user_id` int(11) NOT NULL,            # user id
  `group_id` int(11) default NULL,       # group id
  `org_id` int(11) default NULL,         # organization id
  `param_name` varchar(32) NOT NULL,     # parameter name
  `param_value` varchar(80) default NULL # parameter value
);

# Create an index that guarantees unique parameter names per user.
create unique index param_idx on tt_config(user_id, param_name);


# Below are the tables used by CustomFields plugin.

#
# Structure for table tt_custom_fields. This table contains definitions of custom fields.
#
CREATE TABLE `tt_custom_fields` (
  `id` int(11) NOT NULL auto_increment,    # custom field id
  `group_id` int(11) NOT NULL,             # group id
  `org_id` int(11) default NULL,           # organization id
  `entity_type` tinyint(4) default 1,      # type of entity custom field is associated with (time, user, project, task, etc.)
  `type` tinyint(4) NOT NULL default 0,    # custom field type (text or dropdown)
  `label` varchar(32) NOT NULL default '', # custom field label
  `required` tinyint(4) default 0,         # whether this custom field is mandatory for time records
  `status` tinyint(4) default 1,           # custom field status
  PRIMARY KEY  (`id`)
);


#
# Structure for table tt_custom_field_options. This table defines options for dropdown custom fields.
#
CREATE TABLE `tt_custom_field_options` (
  `id` int(11) NOT NULL auto_increment,    # option id
  `group_id` int(11) default NULL,         # group id
  `org_id` int(11) default NULL,           # organization id
  `field_id` int(11) NOT NULL,             # custom field id
  `value` varchar(32) NOT NULL default '', # option value
  `status` tinyint(4) default 1,           # option status
  PRIMARY KEY  (`id`)
);


#
# Structure for table tt_custom_field_log.
# This table supplements tt_log and contains custom field values for records.
#
CREATE TABLE `tt_custom_field_log` (
  `id` bigint NOT NULL auto_increment, # custom field log id
  `group_id` int(11) default NULL,     # group id
  `org_id` int(11) default NULL,       # organization id
  `log_id` bigint NOT NULL,            # id of a record in tt_log this record corresponds to
  `field_id` int(11) NOT NULL,         # custom field id
  `option_id` int(11) default NULL,    # Option id. Used for dropdown custom fields.
  `value` varchar(255) default NULL,   # Text value. Used for text custom fields.
  `status` tinyint(4) default 1,       # custom field log entry status
  PRIMARY KEY  (`id`)
);

create index log_idx on tt_custom_field_log(log_id);


#
# Structure for table tt_entity_custom_fields.
# This table stores custom field values for entities such as users and projects
# except for "time" entity (and possibly "expense" in future).
# "time" custom fields are kept separately in tt_custom_field_log
# because tt_log (and tt_custom_field_log) can grow very large.
#
CREATE TABLE `tt_entity_custom_fields` (
  `id` int(10) unsigned NOT NULL auto_increment, # record id in this table
  `group_id` int(10) unsigned NOT NULL,          # group id
  `org_id` int(10) unsigned NOT NULL,            # organization id
  `entity_type` tinyint(4) NOT NULL,             # entity type
  `entity_id` int(10) unsigned NOT NULL,         # entity id this record corresponds to
  `field_id` int(10) unsigned NOT NULL,          # custom field id
  `option_id` int(10) unsigned default NULL,     # Option id. Used for dropdown custom fields.
  `value` varchar(255) default NULL,             # Text value. Used for text custom fields.
  `created` datetime default NULL,               # creation timestamp
  `created_ip` varchar(45) default NULL,         # creator ip
  `created_by` int(10) unsigned default NULL,    # creator user_id
  `modified` datetime default NULL,              # modification timestamp
  `modified_ip` varchar(45) default NULL,        # modifier ip
  `modified_by` int(10) unsigned default NULL,   # modifier user_id
  `status` tinyint(4) default 1,                 # record status
  PRIMARY KEY  (`id`)
);

# Create an index that guarantees unique custom fields per entity.
create unique index entity_idx on tt_entity_custom_fields(entity_type, entity_id, field_id);


#
# Structure for table tt_expense_items.
# This table lists expense items.
#
CREATE TABLE `tt_expense_items` (
  `id` bigint NOT NULL auto_increment,    # expense item id
  `date` date NOT NULL,                   # date the record is for
  `user_id` int(11) NOT NULL,             # user id the expense item is reported by
  `group_id` int(11) default NULL,        # group id
  `org_id` int(11) default NULL,          # organization id
  `client_id` int(11) default NULL,       # client id
  `project_id` int(11) default NULL,      # project id
  `name` text NOT NULL,                   # expense item name (what is an expense for)
  `cost` decimal(10,2) default '0.00',    # item cost (including taxes, etc.)
  `invoice_id` int(11) default NULL,      # invoice id
  `approved` tinyint(4) default 0,        # whether the item is approved
  `paid` tinyint(4) default 0,            # whether the item is paid
  `created` datetime default NULL,        # creation timestamp
  `created_ip` varchar(45) default NULL,  # creator ip
  `created_by` int(11) default NULL,      # creator user_id
  `modified` datetime default NULL,       # modification timestamp
  `modified_ip` varchar(45) default NULL, # modifier ip
  `modified_by` int(11) default NULL,     # modifier user_id
  `status` tinyint(4) default 1,          # item status
  PRIMARY KEY  (`id`)
);

# Create indexes on tt_expense_items for performance.
create index date_idx on tt_expense_items(date);
create index user_idx on tt_expense_items(user_id);
create index group_idx on tt_expense_items(group_id);
create index client_idx on tt_expense_items(client_id);
create index project_idx on tt_expense_items(project_id);
create index invoice_idx on tt_expense_items(invoice_id);


#
# Structure for table tt_predefined_expenses.
# This table keeps names and costs for predefined expenses.
#
CREATE TABLE `tt_predefined_expenses` (
  `id` int(11) NOT NULL auto_increment, # predefined expense id
  `group_id` int(11) NOT NULL,          # group id
  `org_id` int(11) default NULL,        # organization id
  `name` varchar(255) NOT NULL,         # predefined expense name, such as mileage
  `cost` decimal(10,2) default '0.00',  # cost for one unit
  PRIMARY KEY  (`id`)
);


#
# Structure for table tt_monthly_quotas.
# This table keeps monthly work hour quotas for groups.
#
CREATE TABLE `tt_monthly_quotas` (
  `group_id` int(11) NOT NULL,            # group id
  `org_id` int(11) default NULL,          # organization id
  `year` smallint(5) UNSIGNED NOT NULL,   # quota year
  `month` tinyint(3) UNSIGNED NOT NULL,   # quota month
  `minutes` int(11) default NULL,         # quota in minutes in specified month and year
  PRIMARY KEY (`group_id`,`year`,`month`)
);


#
# Structure for table tt_timesheets. This table keeps timesheet related information.
#
CREATE TABLE `tt_timesheets` (
  `id` int(11) NOT NULL auto_increment,            # timesheet id
  `user_id` int(11) NOT NULL,                      # user id
  `group_id` int(11) default NULL,                 # group id
  `org_id` int(11) default NULL,                   # organization id
  `client_id` int(11) default NULL,                # client id
  `project_id` int(11) default NULL,               # project id
  `name` varchar(80) COLLATE utf8mb4_bin NOT NULL, # timesheet name
  `comment` text,                                  # timesheet comment
  `start_date` date NOT NULL,                      # timesheet start date
  `end_date` date NOT NULL,                        # timesheet end date
  `submit_status` tinyint(4) default NULL,         # submit status
  `approve_status` tinyint(4) default NULL,        # approve status
  `approve_comment` text,                          # approve comment
  `created` datetime default NULL,                 # creation timestamp
  `created_ip` varchar(45) default NULL,           # creator ip
  `created_by` int(11) default NULL,               # creator user_id
  `modified` datetime default NULL,                # modification timestamp
  `modified_ip` varchar(45) default NULL,          # modifier ip
  `modified_by` int(11) default NULL,              # modifier user_id
  `status` tinyint(4) default 1,                   # timesheet status
  PRIMARY KEY (`id`)
);


#
# Structure for table tt_templates.
# This table keeps templates used in groups.
#
CREATE TABLE `tt_templates` (
  `id` int(11) NOT NULL auto_increment,   # template id
  `group_id` int(11) default NULL,        # group id
  `org_id` int(11) default NULL,          # organization id
  `name` varchar(80) COLLATE utf8mb4_bin NOT NULL, # template name
  `description` varchar(255) default NULL,         # template description
  `content` text,                         # template content
  `created` datetime default NULL,        # creation timestamp
  `created_ip` varchar(45) default NULL,  # creator ip
  `created_by` int(11) default NULL,      # creator user_id
  `modified` datetime default NULL,       # modification timestamp
  `modified_ip` varchar(45) default NULL, # modifier ip
  `modified_by` int(11) default NULL,     # modifier user_id
  `status` tinyint(4) default 1,          # template status
  PRIMARY KEY  (`id`)
);


#
# Structure for table tt_project_template_binds. This table maps projects to templates.
#
CREATE TABLE `tt_project_template_binds` (
  `project_id` int(10) unsigned NOT NULL,        # project id
  `template_id` int(10) unsigned NOT NULL,       # template id
  `group_id` int(10) unsigned NOT NULL,          # group id
  `org_id` int(10) unsigned NOT NULL             # organization id
);

# Indexes for tt_project_template_binds.
create index project_idx on tt_project_template_binds(project_id);
create index template_idx on tt_project_template_binds(template_id);
create unique index project_template_idx on tt_project_template_binds(project_id, template_id);


#
# Structure for table tt_files.
# This table keeps file attachment information.
#
CREATE TABLE `tt_files` (
  `id` int(10) unsigned NOT NULL auto_increment, # file id
  `group_id` int(10) unsigned,                   # group id
  `org_id` int(10) unsigned,                     # organization id
  `remote_id` bigint(20) unsigned,               # file id in storage facility
  `file_key` varchar(32),                        # file key
  `entity_type` varchar(32),                     # type of entity file is associated with (project, task, etc.)
  `entity_id` int(10) unsigned,                  # entity id
  `file_name` varchar(80) COLLATE utf8mb4_bin NOT NULL, # file name
  `description` varchar(255) default NULL,       # file description
  `created` datetime default NULL,               # creation timestamp
  `created_ip` varchar(45) default NULL,         # creator ip
  `created_by` int(10) unsigned,                 # creator user_id
  `modified` datetime default NULL,              # modification timestamp
  `modified_ip` varchar(45) default NULL,        # modifier ip
  `modified_by` int(10) unsigned,                # modifier user_id
  `status` tinyint(1) default 1,                 # file status
  PRIMARY KEY  (`id`)
);


#
# Structure for table tt_site_config. This table stores configuration data
# for Time Tracker site as a whole.
# For example, database version, code version, site language, etc.
#
CREATE TABLE `tt_site_config` (
  `param_name` varchar(32) NOT NULL, # parameter name
  `param_value` text default NULL,   # parameter value
  `created` datetime default NULL,   # creation timestamp
  `modified` datetime default NULL,  # modification timestamp
  PRIMARY KEY  (`param_name`)
);

INSERT INTO `tt_site_config` (`param_name`, `param_value`, `created`) VALUES ('version_db', '1.22.3', now()); # TODO: change when structure changes.

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;

================
File: package.json
================
{
  "name": "pdf-generator-app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "next": "15.3.5",
    "puppeteer": "^24.12.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "xml2js": "^0.6.2",
    "mysql2": "^3.9.2"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "@types/xml2js": "^0.4.14",
    "eslint": "^9",
    "eslint-config-next": "15.3.5",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;

================
File: README.md
================
# XML to PDF Generator

A modern web application built with Next.js that allows users to upload XML files, parse them, and generate beautiful PDF documents with a clean, professional layout.

## Features

- **XML File Upload**: Drag and drop or click to upload XML files
- **XML Parsing**: Automatically parse XML content using xml2js
- **Data Visualization**: View parsed data in a readable JSON format
- **PDF Generation**: Generate professional PDF documents using Puppeteer
- **Modern UI**: Clean, responsive interface built with Tailwind CSS
- **Real-time Processing**: See parsing and generation progress in real-time

## Tech Stack

- **Frontend**: Next.js 15, React 19, TypeScript
- **Styling**: Tailwind CSS
- **XML Parsing**: xml2js
- **PDF Generation**: Puppeteer
- **Development**: ESLint, Turbopack

## Getting Started

### Prerequisites

- Node.js 18+ 
- npm or yarn

### Installation

1. Clone the repository:
```bash
git clone <repository-url>
cd pdf-generator-app
```

2. Install dependencies:
```bash
npm install
```

3. Run the development server:
```bash
npm run dev
```

4. Open [http://localhost:3000](http://localhost:3000) in your browser.

## Usage

1. **Navigate to the Upload Page**: Click "Start Uploading XML" on the home page or go to `/upload`

2. **Upload XML File**: 
   - Drag and drop an XML file onto the upload area
   - Or click to browse and select an XML file

3. **View Parsed Data**: The application will automatically parse the XML and display the structured data

4. **Generate PDF**: Click the "Generate PDF" button to create a professional PDF document

5. **Download**: The PDF will automatically download to your device

## Sample Data

A sample XML file (`sample-data.xml`) is included in the project root for testing purposes. It contains company data with employees, projects, and contact information.

## API Endpoints

- `POST /api/parse-xml`: Parse uploaded XML files
- `POST /api/generate-pdf`: Generate PDF from parsed data

## Project Structure

```
pdf-generator-app/
├── app/
│   ├── api/
│   │   ├── parse-xml/
│   │   │   └── route.ts          # XML parsing API
│   │   └── generate-pdf/
│   │       └── route.ts          # PDF generation API
│   ├── upload/
│   │   └── page.tsx              # Upload page component
│   ├── layout.tsx                # Root layout
│   ├── page.tsx                  # Home page
│   └── globals.css               # Global styles
├── public/                       # Static assets
├── sample-data.xml              # Sample XML file for testing
└── package.json
```

## Development

### Available Scripts

- `npm run dev`: Start development server with Turbopack
- `npm run build`: Build for production
- `npm run start`: Start production server
- `npm run lint`: Run ESLint

### Key Components

- **Upload Page** (`app/upload/page.tsx`): Main interface for file upload and data display
- **XML Parser** (`app/api/parse-xml/route.ts`): Handles XML file parsing using xml2js
- **PDF Generator** (`app/api/generate-pdf/route.ts`): Generates PDF documents using Puppeteer

## Customization

### Styling
The application uses Tailwind CSS for styling. You can customize the design by modifying the CSS classes in the components.

### PDF Layout
The PDF generation uses a custom HTML template with embedded CSS. You can modify the `generateHTML` function in `app/api/generate-pdf/route.ts` to change the PDF layout and styling.

### XML Parsing
The XML parsing configuration can be adjusted in `app/api/parse-xml/route.ts`. The current setup uses `explicitArray: false` to simplify the output structure.

## Deployment

The application can be deployed to Vercel, Netlify, or any other platform that supports Next.js applications.

### Vercel Deployment

1. Push your code to GitHub
2. Connect your repository to Vercel
3. Deploy automatically

## Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests if applicable
5. Submit a pull request

## License

This project is open source and available under the [MIT License](LICENSE).

## Support

For support or questions, please open an issue in the repository.

================
File: sample-data.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<company>
  <name>TechCorp Solutions</name>
  <founded>2015</founded>
  <industry>Technology</industry>
  <employees>
    <employee>
      <id>001</id>
      <name>John Smith</name>
      <position>Software Engineer</position>
      <department>Engineering</department>
      <salary>75000</salary>
      <hire_date>2020-03-15</hire_date>
    </employee>
    <employee>
      <id>002</id>
      <name>Sarah Johnson</name>
      <position>Product Manager</position>
      <department>Product</department>
      <salary>85000</salary>
      <hire_date>2019-07-22</hire_date>
    </employee>
    <employee>
      <id>003</id>
      <name>Mike Davis</name>
      <position>UX Designer</position>
      <department>Design</department>
      <salary>70000</salary>
      <hire_date>2021-01-10</hire_date>
    </employee>
  </employees>
  <projects>
    <project>
      <name>Mobile App Redesign</name>
      <status>In Progress</status>
      <budget>50000</budget>
      <deadline>2024-06-30</deadline>
    </project>
    <project>
      <name>Cloud Migration</name>
      <status>Completed</status>
      <budget>100000</budget>
      <deadline>2023-12-15</deadline>
    </project>
  </projects>
  <contact>
    <email>info@techcorp.com</email>
    <phone>+1-555-0123</phone>
    <address>
      <street>123 Tech Street</street>
      <city>San Francisco</city>
      <state>CA</state>
      <zip>94105</zip>
    </address>
  </contact>
</company>

================
File: test-db.js
================
import mysql from 'mysql2/promise';

const dbConfig = {
  host: 'localhost',
  port: 3306,
  user: 'root',
  password: 'password',
  database: 'sbosdevlk_timetracker',
  charset: 'utf8mb4'
};

async function testDatabase() {
  let connection;
  try {
    console.log('Testing database connection...');
    console.log('Config:', { host: dbConfig.host, port: dbConfig.port, user: dbConfig.user, database: dbConfig.database });
    
    connection = await mysql.createConnection(dbConfig);
    console.log('✅ Database connection successful');
    
    // Test simple query
    const [testRows] = await connection.query('SELECT 1 as test');
    console.log('✅ Simple query test:', testRows);
    
    // Test if tables exist
    const [tables] = await connection.query(`
      SELECT TABLE_NAME 
      FROM INFORMATION_SCHEMA.TABLES 
      WHERE TABLE_SCHEMA = '${dbConfig.database}' 
      AND TABLE_NAME LIKE 'tt_%'
    `);
    console.log('✅ Available tables:', tables.map(t => t.TABLE_NAME));
    
    // Test tt_log table
    const [logCount] = await connection.query('SELECT COUNT(*) as count FROM tt_log WHERE status = 1');
    console.log('✅ tt_log table count:', logCount[0].count);
    
    // Test the actual query that's failing
    const [timeEntries] = await connection.query(`
      SELECT 
        l.*,
        u.name as user_name,
        u.login as user_login,
        p.name as project_name,
        t.name as task_name,
        c.name as client_name
      FROM tt_log l
      LEFT JOIN tt_users u ON l.user_id = u.id
      LEFT JOIN tt_projects p ON l.project_id = p.id
      LEFT JOIN tt_tasks t ON l.task_id = t.id
      LEFT JOIN tt_clients c ON l.client_id = c.id
      WHERE l.status = 1
      ORDER BY l.date DESC, l.created DESC
      LIMIT 10 OFFSET 0
    `);
    console.log('✅ Time entries query successful, returned', timeEntries.length, 'rows');
    
  } catch (error) {
    console.error('❌ Database test failed:', error);
    console.error('Error details:', {
      code: error.code,
      errno: error.errno,
      sqlState: error.sqlState,
      sqlMessage: error.sqlMessage
    });
  } finally {
    if (connection) {
      await connection.end();
      console.log('Database connection closed');
    }
  }
}

testDatabase();

================
File: timesheet-data.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<rows>
<row>
	<date><![CDATA[2025-07-01]]></date>
	<user><![CDATA[Amila Madushanka]]></user>
	<client><![CDATA[Stan Bond]]></client>
	<project><![CDATA[SBOS (Stan Bond)]]></project>
	<time_field_1307><![CDATA[4813]]></time_field_1307>
	<duration><![CDATA[2.00]]></duration>
	<note><![CDATA[Warrantable Order Validation Awnings 
- Check Measure and SABS  
- JS Unifying FA Extreme product]]></note>
</row>
<row>
	<date><![CDATA[2025-07-01]]></date>
	<user><![CDATA[Amila Madushanka]]></user>
	<client><![CDATA[Stan Bond]]></client>
	<project><![CDATA[SBOS (Stan Bond)]]></project>
	<time_field_1307><![CDATA[SBOS-6]]></time_field_1307>
	<duration><![CDATA[2.00]]></duration>
	<note><![CDATA[Downloading quotes
 - Checking doc generator configurations]]></note>
</row>
<row>
	<date><![CDATA[2025-07-01]]></date>
	<user><![CDATA[Amila Madushanka]]></user>
	<client><![CDATA[Stan Bond]]></client>
	<project><![CDATA[SBOS (Stan Bond)]]></project>
	<time_field_1307><![CDATA[SBOS-3]]></time_field_1307>
	<duration><![CDATA[2.00]]></duration>
	<note><![CDATA[Merge Installer app changes to HTML app 
- Fixing Android configurations]]></note>
</row>
<row>
	<date><![CDATA[2025-07-02]]></date>
	<user><![CDATA[Amila Madushanka]]></user>
	<client><![CDATA[Stan Bond]]></client>
	<project><![CDATA[SBOS (Stan Bond)]]></project>
	<time_field_1307><![CDATA[4935]]></time_field_1307>
	<duration><![CDATA[1.00]]></duration>
	<note><![CDATA[Payment History screen]]></note>
</row>
<row>
	<date><![CDATA[2025-07-02]]></date>
	<user><![CDATA[Amila Madushanka]]></user>
	<client><![CDATA[Stan Bond]]></client>
	<project><![CDATA[SBOS (Stan Bond)]]></project>
	<time_field_1307><![CDATA[4934]]></time_field_1307>
	<duration><![CDATA[1.00]]></duration>
	<note><![CDATA[Zipscreen Face Fix Default]]></note>
</row>
<row>
	<date><![CDATA[2025-07-02]]></date>
	<user><![CDATA[Amila Madushanka]]></user>
	<client><![CDATA[Stan Bond]]></client>
	<project><![CDATA[SBOS (Stan Bond)]]></project>
	<time_field_1307><![CDATA[4933]]></time_field_1307>
	<duration><![CDATA[3.00]]></duration>
	<note><![CDATA[SABS portal changes]]></note>
</row>
<row>
	<date><![CDATA[2025-07-02]]></date>
	<user><![CDATA[Amila Madushanka]]></user>
	<client><![CDATA[Stan Bond]]></client>
	<project><![CDATA[SBOS (Stan Bond)]]></project>
	<time_field_1307><![CDATA[4932]]></time_field_1307>
	<duration><![CDATA[0.50]]></duration>
	<note><![CDATA[Order entry bugs]]></note>
</row>
<row>
	<date><![CDATA[2025-07-02]]></date>
	<user><![CDATA[Amila Madushanka]]></user>
	<client><![CDATA[Stan Bond]]></client>
	<project><![CDATA[SBOS (Stan Bond)]]></project>
	<time_field_1307><![CDATA[4931]]></time_field_1307>
	<duration><![CDATA[0.50]]></duration>
	<note><![CDATA[RB motor tails disabled when control is motor]]></note>
</row>
<row>
	<date><![CDATA[2025-07-02]]></date>
	<user><![CDATA[Amila Madushanka]]></user>
	<client><![CDATA[Stan Bond]]></client>
	<project><![CDATA[SBOS (Stan Bond)]]></project>
	<time_field_1307><![CDATA[4930]]></time_field_1307>
	<duration><![CDATA[1.00]]></duration>
	<note><![CDATA[Curtain motor order entry issue]]></note>
</row>
<row>
	<date><![CDATA[2025-07-03]]></date>
	<user><![CDATA[Amila Madushanka]]></user>
	<client><![CDATA[Stan Bond]]></client>
	<project><![CDATA[SBOS (Stan Bond)]]></project>
	<time_field_1307><![CDATA[SBOS-3]]></time_field_1307>
	<duration><![CDATA[8.00]]></duration>
	<note><![CDATA[Merge Installer app changes to HTML app 
- Testing 
- Fixing Android configurations]]></note>
</row>
<row>
	<date><![CDATA[2025-07-04]]></date>
	<user><![CDATA[Amila Madushanka]]></user>
	<client><![CDATA[Stan Bond]]></client>
	<project><![CDATA[SBOS (Stan Bond)]]></project>
	<time_field_1307><![CDATA[4926]]></time_field_1307>
	<duration><![CDATA[3.00]]></duration>
	<note><![CDATA[Install bucket reporting outputs | merge into live server]]></note>
</row>
<row>
	<date><![CDATA[2025-07-04]]></date>
	<user><![CDATA[Amila Madushanka]]></user>
	<client><![CDATA[Stan Bond]]></client>
	<project><![CDATA[SBOS (Stan Bond)]]></project>
	<time_field_1307><![CDATA[SBOS-15]]></time_field_1307>
	<duration><![CDATA[3.00]]></duration>
	<note><![CDATA[Recalculate the Original Task Time for split installations]]></note>
</row>
<row>
	<date><![CDATA[2025-07-04]]></date>
	<user><![CDATA[Amila Madushanka]]></user>
	<client><![CDATA[Stan Bond]]></client>
	<project><![CDATA[SBOS (Stan Bond)]]></project>
	<time_field_1307><![CDATA[SBOS-1]]></time_field_1307>
	<duration><![CDATA[1.00]]></duration>
	<note><![CDATA[Product return location in Recy screen]]></note>
</row>
<row>
	<date><![CDATA[2025-07-05]]></date>
	<user><![CDATA[Amila Madushanka]]></user>
	<client><![CDATA[Stan Bond]]></client>
	<project><![CDATA[SBOS (Stan Bond)]]></project>
	<time_field_1307><![CDATA[SBOS-12]]></time_field_1307>
	<duration><![CDATA[1.00]]></duration>
	<note><![CDATA[Install bucket rebook errors]]></note>
</row>
<row>
	<date><![CDATA[2025-07-05]]></date>
	<user><![CDATA[Amila Madushanka]]></user>
	<client><![CDATA[Stan Bond]]></client>
	<project><![CDATA[SBOS (Stan Bond)]]></project>
	<time_field_1307><![CDATA[SBOS-13]]></time_field_1307>
	<duration><![CDATA[0.50]]></duration>
	<note><![CDATA[Feed back on Automagic/Defaulting]]></note>
</row>
<row>
	<date><![CDATA[2025-07-05]]></date>
	<user><![CDATA[Amila Madushanka]]></user>
	<client><![CDATA[Stan Bond]]></client>
	<project><![CDATA[SBOS (Stan Bond)]]></project>
	<time_field_1307><![CDATA[SBOS-7]]></time_field_1307>
	<duration><![CDATA[2.50]]></duration>
	<note><![CDATA[Install App/recy improvements - Adding Flagged Job Screen]]></note>
</row>
<row>
	<date><![CDATA[2025-07-01]]></date>
	<user><![CDATA[Sasitha Asaranga]]></user>
	<client><![CDATA[Stan Bond]]></client>
	<project><![CDATA[KIOS Stanbond]]></project>
	<time_field_1307><![CDATA[]]></time_field_1307>
	<duration><![CDATA[1.00]]></duration>
	<note><![CDATA[Meeting with Rheeka and peejay for discussion about KIOS]]></note>
</row>
<row>
	<date><![CDATA[2025-07-03]]></date>
	<user><![CDATA[Sasitha Asaranga]]></user>
	<client><![CDATA[Stan Bond]]></client>
	<project><![CDATA[KIOS Stanbond]]></project>
	<time_field_1307><![CDATA[KIOS-1]]></time_field_1307>
	<duration><![CDATA[5.50]]></duration>
	<note><![CDATA[User roles with section access management]]></note>
</row>
<row>
	<date><![CDATA[2025-07-04]]></date>
	<user><![CDATA[Sasitha Asaranga]]></user>
	<client><![CDATA[Stan Bond]]></client>
	<project><![CDATA[KIOS Stanbond]]></project>
	<time_field_1307><![CDATA[KIOS-1]]></time_field_1307>
	<duration><![CDATA[5.00]]></duration>
	<note><![CDATA[KIOS-1 | User roles with section access management]]></note>
</row>
<row>
	<date><![CDATA[2025-07-04]]></date>
	<user><![CDATA[Sasitha Asaranga]]></user>
	<client><![CDATA[Stan Bond]]></client>
	<project><![CDATA[KIOS Stanbond]]></project>
	<time_field_1307><![CDATA[KIOS-1]]></time_field_1307>
	<duration><![CDATA[0.50]]></duration>
	<note><![CDATA[KIOS-1 | User roles with section access management | some other features like disable sections]]></note>
</row>
<row>
	<date><![CDATA[2025-07-04]]></date>
	<user><![CDATA[Sasitha Asaranga]]></user>
	<client><![CDATA[Stan Bond]]></client>
	<project><![CDATA[KIOS Stanbond]]></project>
	<time_field_1307><![CDATA[KIOS-3]]></time_field_1307>
	<duration><![CDATA[1.00]]></duration>
	<note><![CDATA[KIOS-3 | Implement the MVP 1.0 | Analysing for implementation]]></note>
</row>
<row>
	<date><![CDATA[2025-07-07]]></date>
	<user><![CDATA[Sasitha Asaranga]]></user>
	<client><![CDATA[Stan Bond]]></client>
	<project><![CDATA[KIOS Stanbond]]></project>
	<time_field_1307><![CDATA[KIOS-5]]></time_field_1307>
	<duration><![CDATA[1.25]]></duration>
	<note><![CDATA[KIOS-5 | Rheeka as a new admin can not access to admin section issue]]></note>
</row>
<row>
	<date><![CDATA[2025-07-07]]></date>
	<user><![CDATA[Sasitha Asaranga]]></user>
	<client><![CDATA[Stan Bond]]></client>
	<project><![CDATA[KIOS Stanbond]]></project>
	<time_field_1307><![CDATA[KIOS-6]]></time_field_1307>
	<duration><![CDATA[0.75]]></duration>
	<note><![CDATA[KIOS-6 | it only shows home page link in the side bar]]></note>
</row>
<row>
	<date><![CDATA[2025-07-07]]></date>
	<user><![CDATA[Sasitha Asaranga]]></user>
	<client><![CDATA[Stan Bond]]></client>
	<project><![CDATA[KIOS Stanbond]]></project>
	<time_field_1307><![CDATA[KIOS-7]]></time_field_1307>
	<duration><![CDATA[2.00]]></duration>
	<note><![CDATA[KIOS-7 | Implement Reset password feature  correctly]]></note>
</row>
<row>
	<date><![CDATA[2025-07-07]]></date>
	<user><![CDATA[Sasitha Asaranga]]></user>
	<client><![CDATA[Stan Bond]]></client>
	<project><![CDATA[KIOS Stanbond]]></project>
	<time_field_1307><![CDATA[KIOS-8]]></time_field_1307>
	<duration><![CDATA[1.25]]></duration>
	<note><![CDATA[KIOS-8 | Add the option to set the LMS role during the user creation process | Filter by department, roles and lms roles in user mgt area | Redesigned mobile friendly page in user mgt area | Few issues in section access page]]></note>
</row>
<row>
	<date><![CDATA[2025-07-08]]></date>
	<user><![CDATA[Sasitha Asaranga]]></user>
	<client><![CDATA[Stan Bond]]></client>
	<project><![CDATA[KIOS Stanbond]]></project>
	<time_field_1307><![CDATA[]]></time_field_1307>
	<duration><![CDATA[0.25]]></duration>
	<note><![CDATA[Discussed with jonathon about KIOS requirements handling and about action level permission feature]]></note>
</row>
<row>
	<date><![CDATA[2025-07-08]]></date>
	<user><![CDATA[Sasitha Asaranga]]></user>
	<client><![CDATA[Stan Bond]]></client>
	<project><![CDATA[KIOS Stanbond]]></project>
	<time_field_1307><![CDATA[]]></time_field_1307>
	<duration><![CDATA[0.75]]></duration>
	<note><![CDATA[KIOS Meeting about issues and other changes regarding LMS and AI]]></note>
</row>
<row>
	<date><![CDATA[2025-07-08]]></date>
	<user><![CDATA[Sasitha Asaranga]]></user>
	<client><![CDATA[Stan Bond]]></client>
	<project><![CDATA[KIOS Stanbond]]></project>
	<time_field_1307><![CDATA[KIOS-9]]></time_field_1307>
	<duration><![CDATA[0.50]]></duration>
	<note><![CDATA[KIOS -9 | Analysed Role-Based Access Control Matrix]]></note>
</row>
<row>
	<date><![CDATA[2025-07-08]]></date>
	<user><![CDATA[Sasitha Asaranga]]></user>
	<client><![CDATA[Stan Bond]]></client>
	<project><![CDATA[KIOS Stanbond]]></project>
	<time_field_1307><![CDATA[KIOS-10]]></time_field_1307>
	<duration><![CDATA[3.00]]></duration>
	<note><![CDATA[KIOS-10 | User Management Feedback and Suggestions | issues in the video and found issues while testing]]></note>
</row>
<row>
	<date><![CDATA[2025-07-08]]></date>
	<user><![CDATA[Sasitha Asaranga]]></user>
	<client><![CDATA[Stan Bond]]></client>
	<project><![CDATA[KIOS Stanbond]]></project>
	<time_field_1307><![CDATA[KIOS-10]]></time_field_1307>
	<duration><![CDATA[2.25]]></duration>
	<note><![CDATA[KIOS-10 | Defining specific user actions permissions (crud operations for different user roles) for admins and super admins]]></note>
</row>
<row>
	<date><![CDATA[2025-07-01]]></date>
	<user><![CDATA[Sasitha Asaranga]]></user>
	<client><![CDATA[Stan Bond]]></client>
	<project><![CDATA[SBOS (Stan Bond)]]></project>
	<time_field_1307><![CDATA[]]></time_field_1307>
	<duration><![CDATA[0.25]]></duration>
	<note><![CDATA[Providing support for task troubleshooting, issue management, and collaborative problem-solving with the development team.]]></note>
</row>
<row>
	<date><![CDATA[2025-07-01]]></date>
	<user><![CDATA[Sasitha Asaranga]]></user>
	<client><![CDATA[Stan Bond]]></client>
	<project><![CDATA[SBOS (Stan Bond)]]></project>
	<time_field_1307><![CDATA[SBOS-2]]></time_field_1307>
	<duration><![CDATA[3.50]]></duration>
	<note><![CDATA[SBOS-2 | Set up new bitbucket with repositories]]></note>
</row>
<row>
	<date><![CDATA[2025-07-03]]></date>
	<user><![CDATA[Sasitha Asaranga]]></user>
	<client><![CDATA[Stan Bond]]></client>
	<project><![CDATA[SBOS (Stan Bond)]]></project>
	<time_field_1307><![CDATA[]]></time_field_1307>
	<duration><![CDATA[0.50]]></duration>
	<note><![CDATA[Fix the heic converter issue in recy image]]></note>
</row>
<row>
	<date><![CDATA[2025-07-04]]></date>
	<user><![CDATA[Sasitha Asaranga]]></user>
	<client><![CDATA[Stan Bond]]></client>
	<project><![CDATA[SBOS (Stan Bond)]]></project>
	<time_field_1307><![CDATA[]]></time_field_1307>
	<duration><![CDATA[0.75]]></duration>
	<note><![CDATA[Providing support for task troubleshooting, issue management, and collaborative problem-solving with the development team.]]></note>
</row>
<row>
	<date><![CDATA[2025-07-07]]></date>
	<user><![CDATA[Sasitha Asaranga]]></user>
	<client><![CDATA[Stan Bond]]></client>
	<project><![CDATA[SBOS (Stan Bond)]]></project>
	<time_field_1307><![CDATA[]]></time_field_1307>
	<duration><![CDATA[2.00]]></duration>
	<note><![CDATA[Providing support for task troubleshooting, issue management, and collaborative problem-solving with the development team.]]></note>
</row>
<row>
	<date><![CDATA[2025-07-08]]></date>
	<user><![CDATA[Sasitha Asaranga]]></user>
	<client><![CDATA[Stan Bond]]></client>
	<project><![CDATA[SBOS (Stan Bond)]]></project>
	<time_field_1307><![CDATA[]]></time_field_1307>
	<duration><![CDATA[0.25]]></duration>
	<note><![CDATA[Discussed with jonathon about some issues and stuff about scorpio sbos and stanbond sbos]]></note>
</row>
<row>
	<date><![CDATA[2025-07-08]]></date>
	<user><![CDATA[Sasitha Asaranga]]></user>
	<client><![CDATA[Stan Bond]]></client>
	<project><![CDATA[SBOS (Stan Bond)]]></project>
	<time_field_1307><![CDATA[]]></time_field_1307>
	<duration><![CDATA[0.25]]></duration>
	<note><![CDATA[Providing support for task troubleshooting, issue management, and collaborative problem-solving with the development team.]]></note>
</row>
<row>
	<date><![CDATA[2025-07-01]]></date>
	<user><![CDATA[Sasitha Asaranga]]></user>
	<client><![CDATA[Stan Bond]]></client>
	<project><![CDATA[Sbos installer app]]></project>
	<time_field_1307><![CDATA[SBOS-1]]></time_field_1307>
	<duration><![CDATA[3.00]]></duration>
	<note><![CDATA[SBOS-1 | Installer app recy issue and product return location]]></note>
</row>
</rows>

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}




================================================================
End of Codebase
================================================================
